<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Web Developer Hodory</title>
  
  <subtitle>Hodory&#39;s Dev Blog</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://hodory.dev/"/>
  <updated>2019-06-09T09:16:23.000Z</updated>
  <id>https://hodory.dev/</id>
  
  <author>
    <name>khzero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>［Hexo］블로그 주소를 바꾸었어요!</title>
    <link href="https://hodory.dev/2019/06/09/github-pages-blog-migration/"/>
    <id>https://hodory.dev/2019/06/09/github-pages-blog-migration/</id>
    <published>2019-06-09T08:55:48.000Z</published>
    <updated>2019-06-09T09:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>이번에도 <a href="https://gracefullight.dev" target="_blank" rel="noopener">Gracefullight</a>님의 제안으로, dev 도메인을 구매하기로 하였습니다.</p><p>기존의 아이디를 사용하여 <code>khzero.dev</code>를 쓸까 하다가,<br></p><blockquote><p>이왕 구매하는거 깃허브 아이디도 바꾸고, 도메인도 맞춰서 사자!</p></blockquote><p>라고 생각을 했었습니다…그때 멈췄어야 했는데요…<br><a id="more"></a><br><a href="https://gracefullight.dev/2019/05/06/connecting-a-DEV-domain-to-github-pages/" target="_blank" rel="noopener">해당 포스팅</a>을 참조하여 작업을 진행하기 시작했습니다.</p><h3 id="1-도메인-구매-및-연결"><a href="#1-도메인-구매-및-연결" class="headerlink" title="1. 도메인 구매 및 연결"></a>1. 도메인 구매 및 연결</h3><p>닉네임을 찾다가 <code>Hodory</code>로 변경하고, <code>hodory.dev</code> 도메인을 구매했습니다.</p><p>Github Pages로 관리되던 <code>khzero.github.io</code> Repository 이름을 <code>hodory.github.io</code>로 변경하였죠</p><p>지난번 <a href="https://blog.hodory.dev/" target="_blank" rel="noopener">TravisCI로 블로그 자동 배포시 겪은 문제</a>에서 TravisCI로 배포 환경을 구축 했기 때문에,</p><p><img src="https://blog.hodory.dev/images/blog-migration/5.jpg" alt="Github Travis CI Configuration"></p><p>위의 이미지와 같이 깃허브에서 TravisCI 서비스연결도 다시하고, Hexo config.yml도 모두 수정하였습니다.</p><p>기존의 도메인 URL도 모두 변경하여 블로그를 배포했습니다.</p><h3 id="2-기존-블로그는-어떻게-해요"><a href="#2-기존-블로그는-어떻게-해요" class="headerlink" title="2. 기존 블로그는 어떻게 해요???"></a>2. 기존 블로그는 어떻게 해요???</h3><p>생각하여보니 현재 <a href="https://awesome-devblog.netlify.com" target="_blank" rel="noopener">어썸데브블로그</a>에 <code>khzero.github.io</code> 주소의 포스팅들이 공개 되어 있는데,</p><p>깃허브 아이디를 변경하면서 도메인 연결이 끊겨, 404 페이지를 노출하고 있었습니다.</p><p><img src="https://blog.hodory.dev/images/blog-migration/6.jpg" alt="Github Pages Not Found"></p><p>급하게 khzero로 계정을 새로 만든 후, <code>khzero.github.io</code> Repository를 생성하고 기존 포스트를 배포하여 404로 노출되는것은 막았습니다.</p><h3 id="3-서브도메인으로-바꿀래요"><a href="#3-서브도메인으로-바꿀래요" class="headerlink" title="3. 서브도메인으로 바꿀래요!"></a>3. 서브도메인으로 바꿀래요!</h3><p>원래는 도메인을 <code>hodory.dev</code>로 쓰려 했지만, 서브 도메인으로 블로그임을 명시하고 싶어,<br><br>다시 hodory 계정의 hodory.github.io Rpository를 <code>blog.hodory.dev</code>로 CNAME을 설정하고</p><p>아래와 같이 설정하였습니다.<br><br>(<strong>※주의 : CNAME을 배포하면 아래의 설정이 초기화 되니 주의하시기 바랍니다.※</strong>) </p><p><img src="https://blog.hodory.dev/images/blog-migration/7.jpg" alt="Github Pages Custom Domain Setting"></p><p>배포를 하였더니 깃허브로부터 아래와 같은 메일이 왔었습니다.</p><p><img src="https://blog.hodory.dev/images/blog-migration/1.jpg" alt="Github Pages Custom Domain Setting"></p><p>A 레코드에 <code>blog.hodory.dev</code>가 설정되어 있어서인데,<br>CNAME으로 변경하기위해 구글 도메인 DNS 설정에서 아래와 같이 변경했습니다.</p><p><img src="https://blog.hodory.dev/images/blog-migration/9.jpg" alt="Google Domains - DNS Setting"></p><p>설정을 모두 마친 뒤, 지인들에게 자랑을 했는데 블로그가 아래와 같은 오류로 나오지 않는다했습니다.</p><blockquote><p>웹사이트에서 HSTS를 사용하므로 지금은 blog.hodory.dev에 방문할 수 없습니다. <br><br> 네트워크 오류와 공격은 대체로 일시적인 문제이기 때문에 나중에 이 페이지가 정상적으로 작동할 수 있습니다.</p></blockquote><blockquote><p>TTL 문제일 수 있어 최대 1H까지 리졸브가 안될 수 있어요</p></blockquote><p>라는 설명을 듣고 TTL을 <code>1m</code> 으로변경하였습니다</p><p><img src="https://blog.hodory.dev/images/blog-migration/8.jpg" alt="Google Domains - DNS Setting"></p><p>1분정도 지난 후 확인해보니 정상적으로 동작했습니다!</p><p>또 중간에 배포를 하다가 이와 같이 되는 노출되는 경우가 있었는데<br><img src="https://blog.hodory.dev/images/blog-migration/4.jpg" alt="크롬 - 연결이 비공개로 설정되어 있지 않습니다."></p><p>위에 기재하였던 CNAME이 수정되면서, <code>Enforce HTTPS</code> 가 체크 해제되어 있었습니다.<br>이 부분을 수정하니 정상적으로 노출이 되었습니다.</p><h3 id="4-기존-블로그를-연결하자"><a href="#4-기존-블로그를-연결하자" class="headerlink" title="4. 기존 블로그를 연결하자!"></a>4. 기존 블로그를 연결하자!</h3><p>블로그 주소가 변경되면서 해야할 것은</p><ol><li>oneSignal의 URL 변경</li><li>Analytics 수정</li><li>구글 애드센스 확인</li><li>Search Console 연결</li><li>페이스북 픽셀 주소변경</li><li>네이버 웹마스터도구 사이트 추가 </li></ol><p>6가지였습니다.</p><p>대부분 URL 변경만 한다거나, 추가하는 방식으로 간단하게 수정 되었으나, 4번에서 문제가 생겼습니다.</p><p>현재 Search Console의 구버전에서만 가능한 주소 변경 툴인데,</p><p>아래 이미지에 표시된 2번의 301 리디렉션 정상동작 여부에서 막혔습니ㅏㄷ. </p><p><img src="https://blog.hodory.dev/images/blog-migration/3.jpg" alt="Github Page - 301 리디렉션"></p><p>Github Pages 는 정적페이지이다보니 301로 리디렉션이 불가능합니다.</p><p>혹시나 하는 마음에 <a href="https://github.com/jekyll/jekyll-redirect-from" target="_blank" rel="noopener">jekyll-redirect-from</a> 패키지도 확인 해보았으나,</p><p>meta 태그와 script를 이용해 페이지를 이동시키는데,</p><p>구글봇이 해당 페이지를 읽을때 HTTP 코드가 200으로 나와서 301 리디렉션이 되지 않았습니다.</p><p>어쩔 수 없이 <a href="https://github.com/akfish/hexo-theme-redirect" target="_blank" rel="noopener">hexo-theme-redirect</a> 테마를 이용하여, meta 리디렉션만 설정하고</p><p>Search Console은 커뮤니티에 문의를 남기고 우선 재생성하기로 하여 모든 마이그레이션을 마무리지었습니다.</p><p>혹시나 Search Console 주소변경에 대한 다른 방법을 알고 계시다면 공유 부탁 드리겠습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번에도 &lt;a href=&quot;https://gracefullight.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gracefullight&lt;/a&gt;님의 제안으로, dev 도메인을 구매하기로 하였습니다.&lt;/p&gt;
&lt;p&gt;기존의 아이디를 사용하여 &lt;code&gt;khzero.dev&lt;/code&gt;를 쓸까 하다가,&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이왕 구매하는거 깃허브 아이디도 바꾸고, 도메인도 맞춰서 사자!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라고 생각을 했었습니다…그때 멈췄어야 했는데요…&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://hodory.dev/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://hodory.dev/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>［Hexo］TravisCI로 블로그 자동 배포시 겪은 문제</title>
    <link href="https://hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/"/>
    <id>https://hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/</id>
    <published>2019-06-06T03:22:59.000Z</published>
    <updated>2019-06-08T14:57:32.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요"><a href="#WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요" class="headerlink" title="WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!"></a>WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!</h2><blockquote><p>한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다.</p></blockquote><p>아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다… </p><hr><p>블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어<br><br>현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다</p><p>기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure></p><p>쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 <code>package.json</code> 파일을 이용하여,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * package.json</span><br><span class="line"> */</span><br><span class="line">&#123;</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;deploy&quot;: &quot;hexo clean &amp;&amp; hexo d -g&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>해당 스크립트를 작성해서 <code>npm deploy</code>명령어로 배포를 하고, 소스는 별도의 레포지토리에 관리하고 있었습니다.</p><a id="more"></a><p>팀원에게는 자동 배포를 추천하였으나(<a href="https://jheloper.github.io/2019/04/hexo-ci-cd-with-codeship/)" target="_blank" rel="noopener">https://jheloper.github.io/2019/04/hexo-ci-cd-with-codeship/)</a>,<br>저는 설정하지 않고 있었죠…</p><p>그러던 중 <a href="https://gracefullight.dev" target="_blank" rel="noopener">Gracefullight</a>님의 추천을 받아,<br><br>이전에 보았던 ChangJoo Park님의 포스팅인 <a href="https://medium.com/@changjoopark/travis-ci%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-github-pages-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-6a222a2013e6" target="_blank" rel="noopener">Travis CI를 이용한 Github Pages + Hexo 블로그 자동 배포하기</a>를 참고하여<br>작업하기로 결심했습니다.</p><ul><li>Github Access Token 발급 받기</li><li><code>_config.yml</code> 파일에 deploy.repo 수정하기</li><li>배포 스크립트인 <code>.travis.yml</code> 작성하기</li><li>깃허브 플러그인을 이용하여 레포지토리와 연결하기</li><li>Travis CI 서비스에서 해당 프로젝트에 Environment Variables에 <code>__GITHUB_TOKEN__</code> 이름의 환경변수에 액세스 토큰 추가하기 </li></ul><p>위의 다섯가지를 모두 마친 뒤,<br><br>드디어 소스코드를 관리하는 Github Repository에 푸시를 하였습니다!</p><p>빌드도 성공했고, 푸시도 성공적이였습니다.<br><br>확인하고자 블로그에 접속을 하였는데, 빈화면이 노출되고 있었습니다.</p><p>정적페이지이니까 우선적으로 <a href="https://github.com/hodory/hodory.github.io" target="_blank" rel="noopener">Github Page Repo</a>의 파일들을 확인했는데,<br>모든 경로의 index.html 파일들이 0바이트로 변경되어 있었습니다.</p><blockquote><p><code>.gitignore</code> 때문에 컨텐츠가 만들어지지 않는 것인가?<br></p></blockquote><p>먼저 의심을 했고 hexo-generator가 만들어주는 <code>db.json</code>도 git으로 버전관리대상에 추가 후 다시 푸시하였습니다.<br>예상대로 <code>hexo generate</code> 스크립트를 실행할때 생성 되기 때문에, 동일한 현상이 재현 되었습니다.</p><p>스크립트 실행시 무슨 문제가 있었다면 빌드가 중지 되었을텐데, Job log를 보았을때는 그런 문제가 없었습니다.</p><p>그리하여 기존 방식대로 우선 배포를 해둔 후, Job Log를 하나씩 자세히 들여다 보았는데</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WARN  No layout: 2019/06/05/where-is-constructor-inject/index.html</span><br><span class="line">WARN  No layout: 2019/06/04/json-property-not-working/index.html</span><br><span class="line">WARN  No layout: 2019/05/28/required-a-bean-of-type-that-could-not-be-found/index.html</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>위와 같이 No layout 이라는 경고 메세지가 있었습니다.<br><br>혹시나 하여 새로운 폴더에서 소스코드를 풀 받아 보았더니,<br><br>themes 폴더에 사용중이던 테마가 빈 폴더였습니다.</p><p>항상 로컬에서만 푸시 하였기 때문에, 그걸 모르고 있었죠…</p><p>깃허브 레포지토리에는 이와같이 표시되고 클릭 불가능한 상태였습니다.<br><img src="https://github.com/hodory/hodory.github.io/blob/master/images/github-theme-not-versioning.png?raw=true" alt="Github themes directory"></p><p>원인을 찾아본 결과, 해당 theme 마다 .git 디렉토리가 존재하고,<br><br>개별적으로 버전관리가 되고 있기 때문에 저의 레포지토리를 pull을 받아도 사용할 수 없었습니다.</p><p><a href="https://postlude.github.io/2019/01/01/hexo-themes-and-git-submodule/" target="_blank" rel="noopener">해당 포스팅</a>을 보고,<br>서브모듈을 사용해야겠다 생각했습니다.</p><p>하지만 템플릿쪽이다보니 개별적인 수정사항들도 생길 수 있기 때문에 직접 관리하는게 좋겠다 싶어서,<br>아예 .git 폴더를 지우고, 제 레포지토리에서 버전관리 할 수 있게 하는 쪽으로 마음을 바꾸었습니다.</p><p>그런데 <code>themes/icarus/.git</code> 폴더를 삭제하고, <code>git status</code> 명령을 쳤을때,<br><br><code>themes/icarus</code> 디렉토리 하위 파일들이 <code>Untracked files</code>에 없었습니다.<br><br>혹시나해서 폴더명을 바꾸니까 노출이 되었고요..</p><p>git에 캐시가 남아 있나? 싶어 <code>git rm --cached themes/icarus</code> 명령어를 사용하였더니<br><br>정상적으로 <code>Untracked files</code>에 노출이 되어 버전관리에 추가한 후, 푸시를 했습니다.</p><p>그 후, 현재와 같이 정상적으로 동작하고 있습니다!!</p><p>정말 중요한 핵심은 <code>theme 폴더를 레포지토리에 추가하시면됩니다.</code> 였기 때문에<br><br>한줄 요약으로 맨 위에 기재해두었습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요&quot;&gt;&lt;a href=&quot;#WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요&quot; class=&quot;headerlink&quot; title=&quot;WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!&quot;&gt;&lt;/a&gt;WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다… &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어&lt;br&gt;&lt;br&gt;현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다&lt;/p&gt;
&lt;p&gt;기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo clean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo generate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo deploy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 &lt;code&gt;package.json&lt;/code&gt; 파일을 이용하여,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;scripts&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;deploy&amp;quot;: &amp;quot;hexo clean &amp;amp;&amp;amp; hexo d -g&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;해당 스크립트를 작성해서 &lt;code&gt;npm deploy&lt;/code&gt;명령어로 배포를 하고, 소스는 별도의 레포지토리에 관리하고 있었습니다.&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://hodory.dev/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://hodory.dev/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>［Java］해당 클래스의 서비스는 어디서 주입되나요??</title>
    <link href="https://hodory.dev/2019/06/05/where-is-constructor-inject/"/>
    <id>https://hodory.dev/2019/06/05/where-is-constructor-inject/</id>
    <published>2019-06-05T02:40:37.000Z</published>
    <updated>2019-06-08T14:56:49.530Z</updated>
    
    <content type="html"><![CDATA[<p>회사 업무중 스프링 서비스 코드 푸시를 하였습니다.</p><p>다른 팀원들에게</p><blockquote><p>인터페이스를 파라미터로 정의한것은 확인하였는데,<br><br>혹시 해당 컨트롤러에 주입은 어디에서 되나요?`</p></blockquote><p>라는 질문을 들었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와같이 컨트롤러가 선언되어있었습니다.(물론 예제입니다.)<br><a id="more"></a></p><p>해당 클래스의 <code>yourService</code>에 <code>YourServiceImpl(인터페이스 구현체)</code>는 어떻게 주입이 되는걸까요?</p><p>아직도 스프링의 <code>Application Context</code>에 의한 DI(의존성 주입)가 저는 이해하기 어려운것 같습니다.</p><p>인터페이스의 구현체가 Service 어노테이션을 사용해서 <code>Application Context</code>에 의해 관리되는 <code>Bean</code>으로 등록되면,</p><p>해당 인터페이스에 자동으로 주입이됩니다<br><br>(이 부분은 정말 신기하다고 생각합니다.<br><br>제가 PHP 개발자이고, Laravel 프레임워크의 간결함과 모던함을 좋아하는데,<br><br>이렇게까지 사용해본적이 없어,<br><br>해당 프레임워크 뿐 아니라, 다른 언어나 프레임워크에서도 이와같이 주입이 되는지 확답을 쓸 수 없습니다.)</p><p>일반적으로 해당 클래스에 구현체를 주입하기 위해서는</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * controller/YourController.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line">    </span><br><span class="line">    YouController(YourServiceImpl yourService) &#123;</span><br><span class="line">        <span class="keyword">this</span>.yourService = yourService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * service/YourService.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">YourService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">whatYouCall</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * service/impl/YourServiceImpl.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourServiceImpl</span> <span class="keyword">implements</span> <span class="title">YourService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whatYouCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 구현했을것입니다.</p><p>클래스에 <code>YourService</code>라는 Interface를 프로퍼티로 선언한 후,<br><br>해당 클래스에 <code>YourSericeImpl</code>을 주입하여 주는것이죠.</p><p>일반적으로 제가 생각하는 방식 또한 위와 같으나,<br><br><code>Spring Framework</code>는 해당 클래스에 <code>Spring Bean</code>을 주입해줍니다.(????)</p><p><code>@Service</code> 어노테이션을 이용하여 <code>YourServiceImpl</code> 클래스는 <code>YourService</code>의 구현체로 스프링어플리케이션의 빈에 등록이 됩니다.<br><br>더불어, 스프링의 DI에 의해 YourService에 주입될 때는 해당 인터페이스의 구현체가 주입이 되게 되죠…..</p><p>같은 인터페이스의 구현체가 여러개일 경우는 어떻게 해야할까요?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 위의 코드와 같이 구현 클래스를 주입 받는 걸로 바꾼다.</span><br><span class="line">2. `@Qualifier` 어노테이션을 이용한다.</span><br><span class="line">3. 스프링 빈의 네임 기반으로 해야한다.</span><br></pre></td></tr></table></figure><p>제가 아는 방안은 위와 같은 세가지 방안입니다.<br><br>(해당 부분을 가르쳐주신 <a href="https://jheloper.github.io/" target="_blank" rel="noopener">@jhkim</a>님 감사합니다)</p><hr><p>위와 같은 개념을 이해하였다면 Lombok을 사용하여 해당 부분을 더 간소화 시킬 수 있습니다.</p><p><code>@RequiredArgsConstructor</code>은 어떻게 동작할까요?</p><p>해당 어노테이션 인터페이스의 주석을 보면 이와 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generates a constructor with required arguments.</span><br><span class="line">Required arguments are <span class="keyword">final</span> fields and fields with constraints such as &#123;<span class="meta">@code</span> <span class="meta">@NonNull</span>&#125;.</span><br></pre></td></tr></table></figure><p>위의 주석에 따르면 <code>final</code>로 선언된 필드를 매개변수로 갖는 생성자를 자동 생성하여줍니다.</p><p><a href="https://hodory.github.io/2019/05/28/required-a-bean-of-type-that-could-not-be-found/" target="_blank" rel="noopener">이전의 실수 - AllArgsConstructor의 잘못된 사용</a>를 통해 배울 수 있던 부분입니다.</p><p><code>@RequiredArgsConstructor</code> 어노테이션과 함께 <br><br><code>private final YourService yourService;</code> 이와 같이 선언 할 경우,<br><br>해당 코드는 컴파일시 아래와 같이 변환됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line">    </span><br><span class="line">    YouController(YourService yourService) &#123;</span><br><span class="line">        <span class="keyword">this</span>.yourService = yourService;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 본 코드와 유사해지는데요</p><p>이와 같이 Lombok 어노테이션은 생성자를 직접 만들어주기때문에 간결한 코드를 유지할 수 있습니다.</p><p>허나 위의 코드와 다른점은 <code>YourService</code>를 생성자의 파라미터 타입으로 주느냐, <code>YourServiceImpl</code>을 생성자 파라미터 타입으로 주느냐의 차이인데</p><p>위에 언급한바와 같이, 스프링 DI는 스프링 빈에 등록된 클래스를 주입합니다.</p><p>고로, <code>YourService</code> 타입이지만, <code>YourServiceImpl</code> 클래스가 해당 인터페이스를 구현한 구현체이며, 스프링빈으로 등록되어 있기 때문에,<br><br>해당 클래스가 주입이됩니다.  </p><hr><p>포스팅의 잘못된 부분이 있다면 코멘트 또는 메일로 보내주시면<br><br>부족한 부분은 보완하고, 틀린 부분은 수정하겠습니다<br><br>아직 프로그래밍에 서툴어서 제가 이해한 개념과 다를 수 있는데, 많은 도움 부탁드리겠습니다.</p><p>끝으로 긴 글을 읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;회사 업무중 스프링 서비스 코드 푸시를 하였습니다.&lt;/p&gt;
&lt;p&gt;다른 팀원들에게&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인터페이스를 파라미터로 정의한것은 확인하였는데,&lt;br&gt;&lt;br&gt;혹시 해당 컨트롤러에 주입은 어디에서 되나요?`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라는 질문을 들었습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Slf&lt;/span&gt;4j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;YourController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; YourService yourService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;위와같이 컨트롤러가 선언되어있었습니다.(물론 예제입니다.)&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hodory.dev/categories/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/categories/Java/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://hodory.dev/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［Java］@JsonProperty이 왜 동작을 안하지?</title>
    <link href="https://hodory.dev/2019/06/04/json-property-not-working/"/>
    <id>https://hodory.dev/2019/06/04/json-property-not-working/</id>
    <published>2019-06-04T14:13:03.000Z</published>
    <updated>2019-06-04T14:13:03.117Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">anonymousDTO</span> </span>&#123;</span><br><span class="line">    String whatYouWant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대부분 자바의 변수를 생성할때 위와 같이 CamelCase를 많이 쓰는것으로 알고있습니다…..(본인이 잘못 생각하는것일 수 있습니다.)</p><p>필자 또한 위와 같이 <code>camelCase</code>를 사용하였으나 API 통신 및 응답을 리턴할때에는<br><br><code>hyphen uppercase</code>가 필요했습니다.</p><a id="more"></a><p>위의 조건을 충족하기 위해 적절한 어노테이션을 찾았는데,<br><br><code>@JsonProperty(&quot;{WHAT_YOU_WANT}&quot;)</code>였습니다.</p><p>json으로 매핑할때 <code>WHAT_YOU_WANT</code>에 들어갈 값으로 해당 프로퍼티를 매핑하는것이였습니다.</p><p>테스트 코드를 작성하여 확인해보았지만 정상 동작하지 않아,</p><p>주위의 도움을 받았는데,<br><br><code>getter</code>메소드에 해당 어노테이션을 작성해야한다는 조언도 있었으며,<br><br><code>compile group: &#39;com.fasterxml.jackson.core&#39;, name: &#39;jackson-databind&#39;</code><br><br>해당 라이브러리를 gradle에 추가하여 jackson 라이브러리를 최신화 할 필요가 있다는 조언을 받았습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">anonymousDTO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"WHAT-YOU-WANT"</span>)</span><br><span class="line">    String whatYouWant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">anonymousDTO</span> </span>&#123;</span><br><span class="line">    String whatYouWant;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"WHAT-YOU-WANT"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWhatYouWant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.whatYouWant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>많은 주위의 도움을 받아 위와 같이 두가지 방법을적용해 보았으나, 기대하는 결과를 얻을 수 없었습니다.<br><br>(에러나 Exception은 발생하지 않았으나, 요청에 대한 응답을 모델에 매핑하였으나, Null 값이 해당 프로퍼티에 매핑되었습니다.)</p><p>오랜 삽질 끝에 얻은 결과는<br><br>제가 요청에 대한 json Object 응답을 <code>Gson</code>을 이용하여 해당타입으로 받았는데,<br>jackson의 json object로 매핑하였고, jackson의 어노테이션인 <code>@JsonProperty</code>가 기대와 다르게 동작하여,<br>검색하였는데 <code>@SerializedName</code> 어노테이션으로 해결할 수 있다는 StackOverFlow에서의 답변이였습니다.</p><p>그리하여 해당 코드를 이와같이 변경하였습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">anonymousDTO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"WHAT-YOU-WANT"</span>)</span><br><span class="line">    String whatYouWant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gson을 이용할 때에는 <code>@SerializedName</code>을 사용해야하고 jackson을 사용할때에는 <code>@JsonProperty</code>를 사용해야 한다는데<br><br>레거시 PHP와 JS를 좋아하는 저로써는 똑같은 json object 이고, 사실상 <code>JsonObject</code>라는 타입인데,<br><br>Gson의 json 이냐 jackson의 json이냐에 따라 다른 어노테이션을 써야한다는게 이해하기 어려웠습니다.</p><p>지난번, 어노테이션을 사용할때에도 해당 어노테이션이 어떻게 동작하는지 유의를 하며 써야겠다고 다짐했으나,<br><br>결국 빠른 결과물과 편리함을 추구하다보니, 많이 사용하는 어노테이션을 그저 가져다 쓰는데에만 중점을 두었습니다.</p><p>제가 여태까지 사용해온 레거시 php 나 js는 이와 같은 강타입 언어가 아니다보니, 해당 어노테이션도 없을 뿐만 아니라,<br><br>그저 모델 클래스를 만들 필요없이 변수에 담을 수 있었는데,<br><br>이러한 부분이 어렵기도 하고, 긍정적인 시각으로 바라보았을때는 어느정도 타입체킹이 되고, 개발자 입장에선 복잡도는 증가하지만,<br><br>조금 더 안정적이지 않을까 싶기도 합니다.</p><p>물론 제가 다른 대안으로 생각하는 <code>TypeScript</code>와 <code>PHP v7.x</code>도 있지만요…</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;anonymousDTO&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String whatYouWant;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;대부분 자바의 변수를 생성할때 위와 같이 CamelCase를 많이 쓰는것으로 알고있습니다…..(본인이 잘못 생각하는것일 수 있습니다.)&lt;/p&gt;
&lt;p&gt;필자 또한 위와 같이 &lt;code&gt;camelCase&lt;/code&gt;를 사용하였으나 API 통신 및 응답을 리턴할때에는&lt;br&gt;&lt;br&gt;&lt;code&gt;hyphen uppercase&lt;/code&gt;가 필요했습니다.&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hodory.dev/categories/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/categories/Java/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://hodory.dev/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［Java］@AllArgsConstructor의 잘못된 사용</title>
    <link href="https://hodory.dev/2019/05/28/required-a-bean-of-type-that-could-not-be-found/"/>
    <id>https://hodory.dev/2019/05/28/required-a-bean-of-type-that-could-not-be-found/</id>
    <published>2019-05-28T14:29:30.000Z</published>
    <updated>2019-06-08T14:59:03.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration"><a href="#Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration" class="headerlink" title="Consider defining a bean of type java.lang.String in your configuration."></a>Consider defining a bean of type java.lang.String in your configuration.</h1><p>스프링부트로 서비스를 개발중에 <code>@Value</code> 어노테이션을 이용하여 application.yml 파일에 저장해둔 환경변수에 접근하고 싶었는데,<br><br>아래와 같은 오류가 발생하였습니다.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Parameter 2 of constructor in com.hodory.v1.service.MyService required a bean of type 'java.lang.String' that could not be found.</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type 'java.lang.String' in your configuration.</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Retrofit을 사용하기위해 apiBaseUrl을 가져오려 작성한 코드는 아래와 같습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyRepository myRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ModelMapper modelMapper;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.endpoint.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceUrl;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필드에 <code>@Autowired</code>를 사용하는것은 권장하지 않는다는 IDE에서 나오는 메세지때문에 이 방식은 사용하지 않았습니다.</p><p>생성자를 이용한 주입이 아닌 <code>@AllArgsConstructor</code> 어노테이션을 사용한 이유는<br><br>이전에 사용하였을때, 생성자를 이용해 직접 주입하는 방식보다, 의존성 주입 할 대상이 많아졌을때 훨씬 더 깔끔하였던 경험이 있어,<br><br>해당 어노테이션을 사용하였습니다.</p><p><code>private String serviceUrl</code> 을 추가하고나서부터 해당 오류가 나타났습니다.</p><p>한참을 고민하다가 팀원들의 도움을 받아 원인을 알게 되었는데,</p><p><code>serviceUrl</code>이라는 값은 <code>String</code> 타입의 변수일 뿐, 스프링에서 관리하는 Bean이 아니기 때문에 의존성 자동 주입이 될 수 없다는것이였습니다.</p><p><code>@Value</code>를 사용하면 자동 주입이 되는줄 알았는데, 제가 생각했던것과 달랐습니다.</p><p>아래와 같이 스프링 애플리케이션에 의해 자동 주입 가능한 필드들을 파라미터로 가진 생성자를 만들어 필드에 매핑하도록 수정 하였더니,<br><br>오류 없이 serviceUrl에 application.yml파일에 있던 url도 설정 되어 있었습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyRepository myRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ModelMapper modelMapper;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.endpoint.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(MyRepository repository, ModelMapper modelMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myRepository = repository;</span><br><span class="line">        <span class="keyword">this</span>.modelMapper = modelMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 생성자에 직접 필요한 Bean들을 명시하여 주입 하는 방식 말고도<br><br>기존 코드에서 <code>@AllArgsConstructor</code> 대신 <code>@RequiredArgsConstructor</code> 어노테이션을 사용하기만 하면,<br><br><code>final</code>로 선언된 필드나 <code>@NonNull</code> 어노테이션을 사용한 필드만을 필요로 하는 생성자를 만들어주기 때문에,<br><br>이 경우에는 원하는 결과를 얻을 수 있었습니다.</p><p>자바에도 익숙 하지 않고, 의존성 주입이라는 개념에 대해 익숙하지 않은데,<br><br>원리를 파악하지 않고, 남들을 따라하는 기존의 자세에 반성하는 계기가 되었으며,</p><p>어노테이션을 사용 할 때 해당 어노테이션이 해주는 기능만 파악 하는 것 만큼<br><br>어떻게 동작하는지(예를 들어 <code>lombok</code>의 경우 어떤 코드를 생성 해주는지)등을 유의하며 사용해야겠다고 느꼈습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration&quot;&gt;&lt;a href=&quot;#Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration&quot; class=&quot;headerlink&quot; title=&quot;Consider defining a bean of type java.lang.String in your configuration.&quot;&gt;&lt;/a&gt;Consider defining a bean of type java.lang.String in your configuration.&lt;/h1&gt;&lt;p&gt;스프링부트로 서비스를 개발중에 &lt;code&gt;@Value&lt;/code&gt; 어노테이션을 이용하여 application.yml 파일에 저장해둔 환경변수에 접근하고 싶었는데,&lt;br&gt;&lt;br&gt;아래와 같은 오류가 발생하였습니다.&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Parameter 2 of constructor in com.hodory.v1.service.MyService required a bean of type &#39;java.lang.String&#39; that could not be found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consider defining a bean of type &#39;java.lang.String&#39; in your configuration.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hodory.dev/categories/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/categories/Java/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://hodory.dev/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/tags/SpringBoot/"/>
    
      <category term="Lombok" scheme="https://hodory.dev/tags/Lombok/"/>
    
      <category term="Annotation" scheme="https://hodory.dev/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>［Java］스프링부트 회원 기존 비밀번호 체크하기</title>
    <link href="https://hodory.dev/2019/05/14/spring-boot-validate-user-old-password/"/>
    <id>https://hodory.dev/2019/05/14/spring-boot-validate-user-old-password/</id>
    <published>2019-05-14T06:42:32.000Z</published>
    <updated>2019-05-14T06:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>회원 비밀번호 변경 로직을 작성중에 현재 비밀번호와 새 비밀번호를 입력받아,<br><br>기존 비밀번호가 맞는지 체크하는 로직을 넣고 싶었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String currentPassword = <span class="keyword">new</span> BCryptPasswordEncoder().encode(request.getCurrentPassword());</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> User persistUser = userRepository.findUserByIdAndPassword(userId, currentPassword)</span><br><span class="line">        .orElseThrow(() -&gt; <span class="keyword">new</span> EntityNotFoundException(<span class="string">"회원정보를 찾을 수 없습니다."</span>));</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>(!currentPassword.equals(persistUser.getPassword())) &#123;</span><br><span class="line">    logger.info(<span class="string">"changePassword is Not Equal Current Password"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(UserRegisterResult.ERROR.getResponseBody(),</span><br><span class="line">            HttpStatus.FORBIDDEN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new BCryptPasswordEncoder().encode(password);</code>로 암호화 한 패스워드를 저장했기 때문에,<br><br>회원을 찾을때도 이렇게 하면 되겠다고 생각해서 위와 같은 코드를 작성하였는데,<br><br>테스트중 계속하여 <code>EntityNotFoundException</code>이 발생하였습니다.</p><p>디버깅으로 체크하였더니 <code>String currentPassword = new BCryptPasswordEncoder().encode(request.getCurrentPassword());</code> 부분에서 매번 다른 비밀번호가 currentPassword에 들어갔습니다.</p><p>왜 다른 값이 나오는지 알고 싶어 <code>BCryptPasswordEncoder</code> 클래스 파일을 열어보았는데,</p><p>encode 부분에서 <code>rawPassword</code> 와 <code>salt</code>값을 생성하여 두개의 값으로 패스워드를 해싱하고 있었습니다.</p><p>해당 클래스 파일안에 <code>matches(CharSequence rawPassword, String encodedPassword)</code>라는 함수가 있었고,</p><p>클래스의 인터페이스를 확인하였더니,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Verify the encoded password obtained from storage matches the submitted raw</span><br><span class="line"> * password after it too is encoded. Returns true if the passwords match, false if</span><br><span class="line"> * they do not. The stored password itself is never decoded.</span><br><span class="line"> *</span><br><span class="line"> * @param rawPassword the raw password to encode and match</span><br><span class="line"> * @param encodedPassword the encoded password from storage to compare with</span><br><span class="line"> * @return true if the raw password, after encoding, matches the encoded password from</span><br><span class="line"> * storage</span><br><span class="line"> */</span><br><span class="line">boolean matches(CharSequence rawPassword, String encodedPassword);</span><br></pre></td></tr></table></figure><p>라는 주석을 확인하였고, 구현체가 아닌 인터페이스를 사용하고자<br><code>org.springframework.security.crypto.password.PasswordEncoder</code> 를 의존성 주입하여,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> User persistUser = userRepository.findById(userId)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> EntityNotFoundException(<span class="string">"회원정보를 찾을 수 없습니다."</span>));</span><br><span class="line"><span class="keyword">if</span>(!passwordEncoder</span><br><span class="line">                .matches(request.getCurrentPassword(), persistUser.getPassword())) &#123;</span><br><span class="line">    logger.info(<span class="string">"changePassword is Not Equal Current Password"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(UserRegisterResult.ERROR.getResponseBody(),</span><br><span class="line">            HttpStatus.FORBIDDEN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와 같이 수정하였고, 기대했던 결과대로 수행되었습니다.</p><p>아직 자바와 스프링이 많이 서툴러서 코드를 작성하는 시간보다 검색해보는 시간이 많아 더 어려운거 같습니다.</p><p>잘못된 부분이 있다면 코멘트 부탁드리겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;회원 비밀번호 변경 로직을 작성중에 현재 비밀번호와 새 비밀번호를 입력받아,&lt;br&gt;&lt;br&gt;기존 비밀번호가 맞는지 체크하는 로직을 넣고 싶었습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="Java" scheme="https://hodory.dev/categories/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/categories/Java/SpringBoot/"/>
    
    
      <category term="Java" scheme="https://hodory.dev/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［JS］jQuery 없이 Selectbox에서 여러개 선택된 option의 값 추출하기</title>
    <link href="https://hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/"/>
    <id>https://hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</id>
    <published>2019-05-12T05:29:38.000Z</published>
    <updated>2019-05-12T07:13:37.754Z</updated>
    
    <content type="html"><![CDATA[<p>DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.</p><p>물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.</p><p>하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.</p><p>저는 위와 같은 생각으로,<br><br>주로 DOM 핸들링에는 jQuery 의존성을 줄이고자 순수 자바스크립트를 사용하려 노력하고 있습니다.</p><p>또한, <code>document.querySelector</code>와 <code>document.querySelectorAll</code> 를 이용한다면,<br><br>jQuery에서 사용하던 복잡한 DOM Selector도 쉽게 사용할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">name</span>=<span class="string">"user[]"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>선택<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"foo"</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bar"</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"baz"</span>&gt;</span>Baz<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 Multiple SelectBox에서 여러개가 선택되었을 경우 값을 어떻게 가져올까요? </p><p>jQuery를 사용하면 <code>$(&quot;#user&quot;).val()</code>으로 짧고 간결하게 가져올 수 있습니다.</p><p>선택된 값이 없을 경우 null이 리턴되고, 선택된 값이 있으면 배열 안에 value 값이 담깁니다. </p><p>그렇다면 순수 자바스크립트로는 어떻게 표현할까요?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelector(<span class="string">"#user"</span>).selectedOptions, (item)=&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> item.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>document.querySelector(&quot;#user&quot;).selectedOptions</code>를 사용하면 ID 값이 user인 DOM을 찾아 selected 된 옵션을 리턴하여줍니다.<br><br>해당 값에서 value 값만 뽑고싶다면 위와 같이 처리할 수 있습니다.</p><p>위와 같이 처리하면 jQuery를 사용할때와 다른점은 선택된 옵션이 없을 경우에는 []를 리턴하여 줍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.&lt;/p&gt;
&lt;p&gt;물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.&lt;/p&gt;
&lt;p&gt;하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.&lt;/p
      
    
    </summary>
    
      <category term="Javascript" scheme="https://hodory.dev/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://hodory.dev/tags/Javascript/"/>
    
      <category term="JS" scheme="https://hodory.dev/tags/JS/"/>
    
      <category term="Webpack" scheme="https://hodory.dev/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］Monolog와 함께 로그를 시작하자 - 1</title>
    <link href="https://hodory.dev/2019/05/10/php-logging-with-monolog-1/"/>
    <id>https://hodory.dev/2019/05/10/php-logging-with-monolog-1/</id>
    <published>2019-05-09T15:27:05.000Z</published>
    <updated>2019-06-08T14:56:49.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP에서-로그-남기기"><a href="#PHP에서-로그-남기기" class="headerlink" title="PHP에서 로그 남기기"></a>PHP에서 로그 남기기</h3><p>PHP에서는 주로 JS에서 <code>console.log | console.debug</code> 와 유사하게 <br><br><code>var_dump | print_r | echo | sys_log | error_log</code> 등 다양한 방식으로 로그를 남기고 있습니다.</p><h3 id="Monolog란"><a href="#Monolog란" class="headerlink" title="Monolog란?"></a>Monolog란?</h3><p><a href="https://hodory.github.io/2018/04/18/what-is-psr/#PSR-3-Logger-Interface" target="_blank" rel="noopener">PSR-3</a>을 준수하고 있는 로깅 프레임워크로,<br><br>거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.</p><p><a href="http://tools.ietf.org/html/rfc5424" target="_blank" rel="noopener">RFC 5424</a>(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.</p><ul><li>DEBUG(100)</li><li>INFO(200)</li><li>NOTICE(250)</li><li>WARNING(300)</li><li>ERROR(400)</li><li>CRITICAL(500)</li><li>ALERT(550)</li><li>EMERGENCY(600)</li></ul><a id="more"></a><h3 id="코어-컨셉"><a href="#코어-컨셉" class="headerlink" title="코어 컨셉"></a><a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md#core-concepts" target="_blank" rel="noopener">코어 컨셉</a></h3><p>간단하게 Logger Instance에 Record를 추가하면,<br><br>해당 인스턴스에 추가 해두었던 핸들러에 이벤트를 전파하는 것으로 보입니다.(한개의 로그를 여러곳에 저장할 수 있는 이점을 가지고 있습니다.)</p><h3 id="설치-방법"><a href="#설치-방법" class="headerlink" title="설치 방법"></a>설치 방법</h3><p>PHP Composer로 관리할 수 있는 라이브러리이므로 Composer를 이용하여 설치합니다.<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> monolog/monolog</span><br></pre></td></tr></table></figure></p><h3 id="사용방법"><a href="#사용방법" class="headerlink" title="사용방법"></a>사용방법</h3><p>우선적으로 use를 사용하여 사용할 Namespace를 추가합니다.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">StreamHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">FirePHPHandler</span>;</span><br></pre></td></tr></table></figure></p><p>Logging Channel의 이름을 설정하여 객체를 생성합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Create the logger</span><br><span class="line">$logger = new Logger(&apos;Application&apos;);</span><br></pre></td></tr></table></figure></p><p>로그를 전파할 핸들러를 추가합니다.</p><ul><li>php:stderr 또는 원격이나 로컬 파일 기타에 사용할 <code>Stream Handler</code>를 설정합니다.</li><li>Slack Webhook Url으로 보내기 위해 <code>Slack WebHook Handler</code>를 설정합니다.</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Now add some handlers</span></span><br><span class="line">$logger-&gt;pushHandler(<span class="keyword">new</span> StreamHandler(<span class="keyword">__DIR__</span> . <span class="string">'/app.log'</span>, Logger::DEBUG));</span><br><span class="line">$logger-&gt;pushHandler(<span class="keyword">new</span> SlackWebhookHandler(&#123;&#123;WEBHOOK_URL&#125;&#125;, &#123;&#123;CHANNEL&#125;&#125;, &#123;&#123;USERNAME&#125;&#125;, <span class="keyword">false</span>, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, Logger::INFO));</span><br></pre></td></tr></table></figure><p>아래와 같은 함수를 호출하여 로그를 쌓을 수 있습니다.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can now use your logger</span></span><br><span class="line">$logger-&gt;info(<span class="string">'Welcome To Monolog'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********</span></span><br><span class="line"><span class="comment"> * app.log</span></span><br><span class="line"><span class="comment"> *********/</span></span><br><span class="line"><span class="comment">// [2019-05-10 17:03:10] Application.INFO: Welcome To Monolog [] []</span></span><br></pre></td></tr></table></figure></p><p>Legacy한 프로젝트에서는 주로 컨테이너 객체라는 개념이 없는 경우가 많은데,<br><br>프로젝트 내부에서도 글로벌 변수에 담아서 Logger 객체를 사용해야하나 고민하였습니다.<br>문서를 확인하다보니 이를 위한 <code>Monolog\Registry</code>라는 유틸 클래스가 있었고,<br>이와 같이 사용할 수 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************</span></span><br><span class="line"><span class="comment"> * bootstrap.php</span></span><br><span class="line"><span class="comment"> ****************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">StreamHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Registry</span>;</span><br><span class="line"></span><br><span class="line">$logger = <span class="keyword">new</span> Logger(<span class="string">'Application'</span>);</span><br><span class="line">$logger-&gt;pushHandler(<span class="keyword">new</span> StreamHandler(<span class="keyword">__DIR__</span> . <span class="string">'/app.log'</span>, Logger::DEBUG));</span><br><span class="line">Registry::addLogger($logger,<span class="string">'ApplicationLog'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************</span></span><br><span class="line"><span class="comment"> * foo.php</span></span><br><span class="line"><span class="comment"> ****************/</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Registry</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">"/bootstrap.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logInfo</span><span class="params">($message)</span> </span>&#123;</span><br><span class="line">    $logger = Registry::getInstance(<span class="string">'ApplicationLog'</span>);</span><br><span class="line">    $logger-&gt;info($message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logInfo(<span class="string">'I am Global Logging'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********</span></span><br><span class="line"><span class="comment"> * app.log</span></span><br><span class="line"><span class="comment"> *********/</span></span><br><span class="line"><span class="comment">// [2019-05-10 17:03:10] Application.INFO: I am Global Logging [] []</span></span><br></pre></td></tr></table></figure><p>이와 같이 bootstrap.php 파일에서 Register에 등록한 Logger 객체는<br><br>global 변수를 사용하지 않아도 클래스 / 함수 상관 없이 어디에서든지 사용 가능해집니다.</p><p>더 좋은 활용 방법이 있으시다면 공유 부탁드리겠습니다.</p><p>자세한 사항은 <a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md" target="_blank" rel="noopener">Monolog-Usage</a>에서 확인 하실 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP에서-로그-남기기&quot;&gt;&lt;a href=&quot;#PHP에서-로그-남기기&quot; class=&quot;headerlink&quot; title=&quot;PHP에서 로그 남기기&quot;&gt;&lt;/a&gt;PHP에서 로그 남기기&lt;/h3&gt;&lt;p&gt;PHP에서는 주로 JS에서 &lt;code&gt;console.log | console.debug&lt;/code&gt; 와 유사하게 &lt;br&gt;&lt;br&gt;&lt;code&gt;var_dump | print_r | echo | sys_log | error_log&lt;/code&gt; 등 다양한 방식으로 로그를 남기고 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;Monolog란&quot;&gt;&lt;a href=&quot;#Monolog란&quot; class=&quot;headerlink&quot; title=&quot;Monolog란?&quot;&gt;&lt;/a&gt;Monolog란?&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hodory.github.io/2018/04/18/what-is-psr/#PSR-3-Logger-Interface&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PSR-3&lt;/a&gt;을 준수하고 있는 로깅 프레임워크로,&lt;br&gt;&lt;br&gt;거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5424&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RFC 5424&lt;/a&gt;(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DEBUG(100)&lt;/li&gt;
&lt;li&gt;INFO(200)&lt;/li&gt;
&lt;li&gt;NOTICE(250)&lt;/li&gt;
&lt;li&gt;WARNING(300)&lt;/li&gt;
&lt;li&gt;ERROR(400)&lt;/li&gt;
&lt;li&gt;CRITICAL(500)&lt;/li&gt;
&lt;li&gt;ALERT(550)&lt;/li&gt;
&lt;li&gt;EMERGENCY(600)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
      <category term="LogSystem" scheme="https://hodory.dev/tags/LogSystem/"/>
    
      <category term="Composer" scheme="https://hodory.dev/tags/Composer/"/>
    
      <category term="Packagist" scheme="https://hodory.dev/tags/Packagist/"/>
    
  </entry>
  
  <entry>
    <title>［Laravel］with() | has() | whereHas() 뭐가 다를까</title>
    <link href="https://hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/"/>
    <id>https://hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/</id>
    <published>2019-04-26T15:15:24.000Z</published>
    <updated>2019-05-12T07:09:26.726Z</updated>
    
    <content type="html"><![CDATA[<p>ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서,</p><p>쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다</p><p>검색으로 알아보던중 <a href="https://laravel.kr/docs/5.8/eloquent-relationships" target="_blank" rel="noopener">Eloquent:Relations</a>에 대해 알게되었습니다.</p><p><a href="https://laravel.kr/docs/5.8/eloquent-relationships#%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A1%B4%EC%9E%AC%20%EC%97%AC%EB%B6%80%20%EC%BF%BC%EB%A6%AC%20%EC%A7%88%EC%9D%98%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기</a></p><p>예를들어 <code>User</code>가 여러개의 <code>Post</code> 를 가지고 있다면,<br><br><code>User</code> 클래스에 <code>$this-&gt;hasMany(&#39;App\Post&#39;);</code>를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.<br><a id="more"></a> </p><h2 id="with"><a href="#with" class="headerlink" title="with()"></a>with()</h2><ul><li>user<ul><li>id</li><li>name</li></ul></li><li>post<ul><li>id</li><li>user_id</li><li>title<br>이와 같은 테이블 구조에서 유저가 작성한 글의 제목을 조회하려면<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$users = selectAll(<span class="string">"select * from `user`);</span></span><br><span class="line"><span class="string">foreach ($users as $user) &#123;</span></span><br><span class="line"><span class="string">    $user['post_title'] = selectOne("</span>select `title` from `post` where `post`.`user_id` = &#123;$user[<span class="string">'id'</span>]&#125;<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>회원을 조회하고, 회원들을 순회하며 게시물을 조회하는 코드입니다.<br><br>이 경우 회원이 1000명일 경우 쿼리는 1001번 실행하게 됩니다.<br><br>이것을 <a href="https://zetawiki.com/wiki/N%2B1_%EC%BF%BC%EB%A6%AC_%EB%AC%B8%EC%A0%9C" target="_blank" rel="noopener">N+1쿼리 문제</a> 라고 합니다.</p><p>사람들에 따라 직관적이여서 선호하기도 하고,<br><br>join으로 실행시 쿼리가 오래 걸리면 이와 같이 분리하여 사용하기도 합니다.<br>또는 join으로 해결할 수 없는 상황에서도 사용합니다.</p><p>이 문제를 해결 하기 위해</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = selectAll("<span class="keyword">select</span> <span class="string">`user`</span>.*,<span class="string">`post`</span>.<span class="string">`title`</span> <span class="keyword">as</span> post_title <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">left</span> <span class="keyword">join</span> <span class="string">`post`</span> <span class="keyword">on</span> <span class="string">`post`</span>.<span class="string">`user_id`</span> = <span class="string">`user`</span>.<span class="string">`id`</span><span class="string">");</span></span><br></pre></td></tr></table></figure><p>join으로 해결할 수 없는 경우를 제외 하고는 위와 같이 join을 사용해서 조회 할 수 있습니다.</p><p>또한 이 문제는 ORM에서 주로 발생 합니다.<br><br>ORM을 사용하면 user와 post의 관계를 설정하고, 아래와 같이 사용할 수 있습니다.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (User::all() <span class="keyword">as</span> $user) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $user-&gt;post-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>해당 코드는<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from `user`; # 1, 2, 3, 4, 5, 6....</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`post`</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`post`</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`post`</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`post`</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>user를 조회하고, user의 수 만큼 post를 조회합니다.<br><br>위의 N+1 문제와 같은 문제입니다.</p><p>이 문제를 해결 하기 위한 방안으로는 <a href="https://zetawiki.com/wiki/%EC%A6%89%EC%8B%9C_%EB%A1%9C%EB%94%A9" target="_blank" rel="noopener">즉시 로딩(Eager Loading)</a>이 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (User::with(<span class="string">'posts'</span>)-&gt;get() <span class="keyword">as</span> $user)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $user-&gt;post-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와같이 <code>with()</code>를 사용하면 미리 선언한 관계를 사용하여 같이 가져올수있습니다.<br><br>언뜻 보기엔 별 다를바 없어 보이는 코드이지만 with 메소드를 사용하면, user와 연관된 post를 미리 로드합니다.</p><p>실행되는 쿼리는 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from `user`; # 1, 2, 3, 4, 5, 6....</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`post`</span> <span class="keyword">where</span> <span class="string">`id`</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, ...);</span><br></pre></td></tr></table></figure><p>위와 같이 쿼리 2개만 실행이 되어 쿼리 실행을 최소화 할 수 있습니다.</p><p><code>with()</code> 메소드의 2번째 파라미터를 사용해 제한 할 수도 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(User::with([<span class="string">'posts'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">        $query-&gt;where(<span class="string">'title'</span>, <span class="string">'like'</span>, <span class="string">'치킨%'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">])-&gt;get() <span class="keyword">as</span> $user) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $user-&gt;post-&gt;title;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><code>user</code>를 조회할 때, <code>치킨</code>으로 시작하는 <code>post</code>를 같이 미리 로드 할 수 있습니다.</p><h2 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h2><p><code>has()</code> 메소드를 이용하면, 해당 관계에서 최소 한개를 가지고 있는 결과를 조회합니다</p><p><code>User::has(&#39;posts&#39;)-&gt;get();</code>을 사용하면 post를 한개라도 작성한 회원을 조회할것입니다.</p><p>쿼리로 표현한다면, 아래와 비슷할것 같습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> <span class="string">`user`</span></span><br><span class="line">       <span class="keyword">join</span> <span class="string">`post`</span> <span class="keyword">on</span> <span class="string">`user`</span>.<span class="string">`id`</span> = <span class="string">`post`</span>.<span class="string">`user_id`</span></span><br></pre></td></tr></table></figure><p>has 메소드는 2번째 파라미터에 <code>operator</code> 와 3번째 파라미터에 <code>count</code>를 사용할 수 있습니다.<br></p><p>이 파라미터를 사용하면 예로 5개 이상의 글을 작성한 회원을 찾을 수 있습니다.<br>Eloquent를 사용하면 이와같이 작성 할 수 있습니다.<br><br><code>User::has(&#39;posts&#39;, &#39;&gt;=&#39;, 5)-&gt;get();</code></p><h2 id="whereHas"><a href="#whereHas" class="headerlink" title="whereHas()"></a>whereHas()</h2><p>그렇다면 <code>whereHas()</code>는 뭐가 다를까요? <br><br><code>whereHas()</code> 메소드는 두번째 파라미터로 콜백을 받아 더 복잡한 쿼리를 처리할 수 있습니다. </p><p>위와 같은 모델링에서 게시글의 제목이 <code>치킨</code>으로 시작하는 글을 작성한 회원을 찾는다면 아래와 같을것 입니다. </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User::whereHas(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">    $query-&gt;where(<span class="string">'title'</span>, <span class="string">'like'</span>, <span class="string">'치킨%'</span>);</span><br><span class="line">&#125;)-&gt;get();</span><br></pre></td></tr></table></figure><p>쿼리로 표현한다면</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> <span class="string">`user`</span></span><br><span class="line">       <span class="keyword">join</span> <span class="string">`post`</span> <span class="keyword">on</span></span><br><span class="line">    <span class="string">`user`</span>.<span class="string">`id`</span> = <span class="string">`post`</span>.<span class="string">`user_id`</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    <span class="string">`post`</span>.<span class="string">`title`</span> <span class="keyword">like</span> <span class="string">'치킨%'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> <span class="string">`user`</span></span><br><span class="line">       <span class="keyword">join</span> <span class="string">`post`</span> <span class="keyword">on</span> <span class="string">`user`</span>.<span class="string">`id`</span> = <span class="string">`post`</span>.<span class="string">`user_id`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`post`</span>.<span class="string">`title`</span> <span class="keyword">like</span> <span class="string">'치킨%'</span></span><br></pre></td></tr></table></figure><p>이와 같이 표현할 수 있을것 같습니다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://stackoverflow.com/questions/30231862/laravel-eloquent-has-with-wherehas-what-do-they-mean?answertab=votes#tab-top" title="해당 링크로 이동" target="_blank" rel="noopener">Stack Overflow -&gt; Laravel - Eloquent “Has”, “With”, “WhereHas” - What do they mean?</a></li><li><a href="https://laravel.kr/docs/5.8/eloquent-relationships" title="해당 링크로 이동" target="_blank" rel="noopener">Laravel 공식 문서 -&gt; Eloquent: Relationships - 관계</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서,&lt;/p&gt;
&lt;p&gt;쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다&lt;/p&gt;
&lt;p&gt;검색으로 알아보던중 &lt;a href=&quot;https://laravel.kr/docs/5.8/eloquent-relationships&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eloquent:Relations&lt;/a&gt;에 대해 알게되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://laravel.kr/docs/5.8/eloquent-relationships#%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A1%B4%EC%9E%AC%20%EC%97%AC%EB%B6%80%20%EC%BF%BC%EB%A6%AC%20%EC%A7%88%EC%9D%98%ED%95%98%EA%B8%B0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;예를들어 &lt;code&gt;User&lt;/code&gt;가 여러개의 &lt;code&gt;Post&lt;/code&gt; 를 가지고 있다면,&lt;br&gt;&lt;br&gt;&lt;code&gt;User&lt;/code&gt; 클래스에 &lt;code&gt;$this-&amp;gt;hasMany(&amp;#39;App\Post&amp;#39;);&lt;/code&gt;를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
      <category term="Laravel" scheme="https://hodory.dev/tags/Laravel/"/>
    
      <category term="Eloquent" scheme="https://hodory.dev/tags/Eloquent/"/>
    
      <category term="ORM" scheme="https://hodory.dev/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>［JS］Knex와 Webpack을 같이 쓰면서 발생한 오류 처리</title>
    <link href="https://hodory.dev/2019/04/18/knex-with-webpack/"/>
    <id>https://hodory.dev/2019/04/18/knex-with-webpack/</id>
    <published>2019-04-18T10:10:52.000Z</published>
    <updated>2019-06-08T14:57:07.154Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR in &apos;./node_modules/knex/lib/dialects/mssql/index.js&apos;</span><br><span class="line">Module not found: Error : Can&apos;t resolve &apos;mssql/lib/base&apos;</span><br></pre></td></tr></table></figure><p>프로젝트에 웹팩을 도입하여 사용중, <code>knex</code> 라이브러리를 넣고 나서<br><br>웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.</p><a id="more"></a><p>해당 오류를 검색 하였는데,<br><br>역시나 <a href="https://github.com/tgriesser/knex/issues/1128#issuecomment-312735118" target="_blank" rel="noopener">깃허브 이슈</a>가 있었고(감사합니다),<br>webpack의 config에 아래의 내용을 추가 하였습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  knex: <span class="string">'commonjs knex'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 작업 후 빌드는 성공했지만,<br><br>노드 서버에서 실행시 knex 모듈을 찾을 수 없다는 오류가 나왔습니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;errorMessage&quot;: &quot;Cannot find module &apos;knex&apos;&quot;,</span><br><span class="line">  &quot;errorType&quot;: &quot;Error&quot;,</span><br><span class="line">  &quot;stackTrace&quot;: [</span><br><span class="line">    &quot;Function.Module._load (module.js:474:25)&quot;,</span><br><span class="line">    &quot;Module.require (module.js:596:17)&quot;,</span><br><span class="line">    &quot;require (internal/module.js:11:18)&quot;,</span><br><span class="line">    &quot;Object.defineProperty.value (/var/task/main.js:1604:18)&quot;,</span><br><span class="line">    &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;,</span><br><span class="line">    &quot;Object.&lt;anonymous&gt; (/var/task/main.js:1564:14)&quot;,</span><br><span class="line">    &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;,</span><br><span class="line">    &quot;Object.defineProperty.value (/var/task/main.js:1442:20)&quot;,</span><br><span class="line">    &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>계속해서 구글링하던중, 다른분의 도움으로 <a href="https://github.com/tgriesser/knex/issues/1446#issuecomment-253245823" target="_blank" rel="noopener">해당 이슈</a> 코멘트를 찾았습니다.<br><br>해당 코드를 참고하여 mysql2 라이브러리를 사용했기때문에 아래와 같은 코드를 추가 하였습니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.NormalModuleReplacementPlugin(/\.\.migrate/, &apos;../util/noop.js&apos;),</span><br><span class="line">    new webpack.NormalModuleReplacementPlugin(/\.\.seed/, &apos;../util/noop.js&apos;),</span><br><span class="line">    new webpack.IgnorePlugin(/mariasql/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/mysql/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/mssql/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/oracle/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/oracledb/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/postgres/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/redshift/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/pg-query-stream/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/sqlite3/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/strong-oracle/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/pg-native/, /pg/)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>빌드는 성공 했으나 정상 동작하지 않아 확인 해보니 <code>/node_modules/knex/lib/mysql2/index.js</code> 해당 파일에</p><p><img src="https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png?raw=true" alt="/node_modules/knex/lib/mysql2/index.js"></p><p>이러한 코드가 있어서 결국 mysql2를 쓰더라도 mysql 라이브러리가 필요하였습니다.</p><p>굳이 mysql2 모듈을 고집 할 필요가 없을것 같아, mysql 모듈로 변경하고,<br><br><code>new webpack.IgnorePlugin(/mysql/, /knex/)</code> 를 <code>new webpack.IgnorePlugin(/mysql2/, /knex/),</code> 로 변경하니<br>빌드도 성공하였으며, 정상 동작 하였습니다.</p><p>더 좋은 방법이 있을거 같은데 아쉽게도 제가 찾은 방법은 이것 밖에 없었습니다.<br><br>좋은 해결 방안 있으면 댓글로 공유 부탁 드리겠습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR in &amp;apos;./node_modules/knex/lib/dialects/mssql/index.js&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Module not found: Error : Can&amp;apos;t resolve &amp;apos;mssql/lib/base&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;프로젝트에 웹팩을 도입하여 사용중, &lt;code&gt;knex&lt;/code&gt; 라이브러리를 넣고 나서&lt;br&gt;&lt;br&gt;웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://hodory.dev/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://hodory.dev/tags/Javascript/"/>
    
      <category term="JS" scheme="https://hodory.dev/tags/JS/"/>
    
      <category term="Webpack" scheme="https://hodory.dev/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］배열 key의 min 또는 max 구하기</title>
    <link href="https://hodory.dev/2018/10/27/php-array-column/"/>
    <id>https://hodory.dev/2018/10/27/php-array-column/</id>
    <published>2018-10-27T06:23:32.000Z</published>
    <updated>2019-05-12T07:11:32.057Z</updated>
    
    <content type="html"><![CDATA[<p>PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요</p><p>아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?<br><a id="more"></a></p><p>또는 이러한 배열에서 특정 키값의 값만 뽑아 배열로 만들고싶다면 어떻게 해야할까요?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(3) &#123;</span><br><span class="line">    [&quot;title&quot;]=&gt;</span><br><span class="line">    string(5) &quot;apple&quot;</span><br><span class="line">    [&quot;cnt&quot;]=&gt;</span><br><span class="line">    int(1) &quot;5&quot;</span><br><span class="line">    [&quot;color&quot;]=&gt;</span><br><span class="line">    string(5) &quot;green&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  array(3) &#123;</span><br><span class="line">    [&quot;name&quot;]=&gt;</span><br><span class="line">    string(4) &quot;pear&quot;</span><br><span class="line">    [&quot;cnt&quot;]=&gt;</span><br><span class="line">    int(1) &quot;8&quot;</span><br><span class="line">    [&quot;color&quot;]=&gt;</span><br><span class="line">    string(6) &quot;yellow&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>배열을 순회하여 해당 키의 값을 뽑아 배열을 만들고,</p><p>최소 또는 최대값이 필요하면 min 또는 max 함수를 적용해야 한다 생각했습니다.</p><p>그런 코드는 만들고 싶지 않아 검색을 하다보니</p><p>PHP 5.5버전부터는 <a href="http://php.net/manual/en/function.array-column.php" title="해당 링크로 이동" target="_blank" rel="noopener">array_column</a>을 사용하면 쉽게 처리할 수 있었습니다.</p><p><code>array array_column ( array $input , mixed $column_key [, mixed $index_key = NULL ] )</code> 와 같은 구조로</p><p>첫번째 파라미터에 해당 배열을 넣고, 두번째 파라미터에 뽑아낼 key를 넣으면 됩니다.</p><p>예를들어 아래와 같은 연관 배열에서 cnt로만 배열을 만들려면 이와 같이 할 수 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'title'</span>=&gt;<span class="string">'title1'</span>,</span><br><span class="line">        <span class="string">'cnt'</span>=&gt;<span class="number">2</span>,</span><br><span class="line">        <span class="string">'color'</span>=&gt;<span class="string">'blue'</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'title'</span>=&gt;<span class="string">'title2'</span>,</span><br><span class="line">        <span class="string">'cnt'</span>=&gt;<span class="number">3</span>,</span><br><span class="line">        <span class="string">'color'</span>=&gt;<span class="string">'blue'</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$cntArr = array_column($arr, <span class="string">'cnt'</span>);</span><br><span class="line">var_dump($cntArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">### Result </span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  int(<span class="number">2</span>)</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  int(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 세번째 파라미터로는 index_key를 넣을 수 있는데요</p><p>return 할 배열의 키로 사용할 값을 넣으면 됩니다 예를들어 이렇게 쓸 수 있을것 같았습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// example code</span></span><br><span class="line"></span><br><span class="line">$arr = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'idx'</span> =&gt; <span class="number">2555</span>,</span><br><span class="line">        <span class="string">'title'</span>=&gt;<span class="string">'title1'</span>,</span><br><span class="line">        <span class="string">'cnt'</span>=&gt;<span class="number">2</span>,</span><br><span class="line">        <span class="string">'color'</span>=&gt;<span class="string">'blue'</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'idx'</span> =&gt; <span class="number">2982</span>,</span><br><span class="line">        <span class="string">'title'</span>=&gt;<span class="string">'title2'</span>,</span><br><span class="line">        <span class="string">'cnt'</span>=&gt;<span class="number">3</span>,</span><br><span class="line">        <span class="string">'color'</span>=&gt;<span class="string">'blue'</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$cntArr = array_column($arr, <span class="string">'cnt'</span>, <span class="string">'idx'</span>);</span><br><span class="line">var_dump($cntArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">### Result</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">2555</span>]=&gt;</span><br><span class="line">  int(<span class="number">2</span>)</span><br><span class="line">  [<span class="number">2982</span>]=&gt;</span><br><span class="line">  int(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와같이 사용하면 해당 idx의 cnt를 뽑을 수 있어 더 효율적으로 사용할 수 있을거 같습니다.</p><p>더 좋은 사용 방안 있으시면 댓글로 부탁드리겠습니다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://stackoverflow.com/questions/17339421/find-highest-value-in-multidimensional-array" title="해당 링크로 이동" target="_blank" rel="noopener">StackOverFlow - Find highest value in multidimensional array</a></li><li><a href="https://secure.php.net/manual/en/function.array-column.php" title="해당 링크로 이동" target="_blank" rel="noopener">PHP 공식문서 - array_column()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요&lt;/p&gt;
&lt;p&gt;아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
      <category term="str_pad" scheme="https://hodory.dev/tags/str-pad/"/>
    
      <category term="function" scheme="https://hodory.dev/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>［VueJS］vue.js에서 이벤트 버스 사용하기</title>
    <link href="https://hodory.dev/2018/08/27/vuejs-eventbus/"/>
    <id>https://hodory.dev/2018/08/27/vuejs-eventbus/</id>
    <published>2018-08-27T07:51:38.000Z</published>
    <updated>2019-04-20T15:56:26.346Z</updated>
    
    <content type="html"><![CDATA[<p>MPA(Multi Page Application)에서 Vue를 적용 시키던중</p><p>부모-자식간의 관계가 아닌 컴포넌트 간의 동작에 따른 데이터 변화와 이벤트 처리가 필요해졌습니다.<br><a id="more"></a></p><p>주로 공통 데이터를 다루기 위해 사용하는 부분이라 Vuex를 써볼까도 했지만,</p><p><a href="https://vuex.vuejs.org/kr/" target="_blank" rel="noopener">Vuex 튜토리얼</a>에서 <code>앱이 단순하다면 Vuex없이는 괜찮을 것입니다. 간단한 글로벌 이벤트 버스만 있으면됩니다</code> 라는 글귀를 읽고, <code>글로벌 이벤트 버스를 사용하자</code>로 마음을 굳혔습니다.</p><p>아래와 같이 공통으로 사용할 이벤트버스 js 파일을 생성합니다.<br>Vue EventBus 객체를 생성하여 export 하여 다른 파일에서도 로드하여 사용 할 수 있도록 합니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /js/eventBus.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> EventBus = <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> EventBus;</span><br></pre></td></tr></table></figure></p><p>그 후 해당 이벤트 버스를 사용할 컴포넌트들에서 eventBus.js를 import 하여 아래와 같이 사용했습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">* /js/Button.vue</span></span><br><span class="line"><span class="comment">********/</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click.prevent=<span class="string">"onClickButton"</span>&gt;Click Me&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> EventBus <span class="keyword">from</span> <span class="string">"./eventBus.js"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: [<span class="string">'code'</span>, <span class="string">'title'</span>],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onClickButton() &#123;</span><br><span class="line">            EventBus.$emit(<span class="string">"onModalButtonClick"</span>, <span class="keyword">this</span>.code, <span class="keyword">this</span>.title)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>*******</span><br><span class="line">* <span class="regexp">/js/</span>Modal.vue</span><br><span class="line">********<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="myModal" class="modal" v-show="_isShow"&gt;</span></span><br><span class="line"><span class="regexp">        ...</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import EventBus from './</span>eventBus.js<span class="string">';</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            _isShow: false,</span></span><br><span class="line"><span class="string">            code: null,</span></span><br><span class="line"><span class="string">            title: null,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    mounted() &#123;</span></span><br><span class="line"><span class="string">        EventBus.$on("onModalButtonClick", (code, title) =&gt; &#123;</span></span><br><span class="line"><span class="string">            this.code = code;</span></span><br><span class="line"><span class="string">            this.title = title;</span></span><br><span class="line"><span class="string">            this._isShow = true;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">... </span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="실제로는-위의-코드보다-복잡했지만-예시에-불필요한-부분은-제거하였습니다"><a href="#실제로는-위의-코드보다-복잡했지만-예시에-불필요한-부분은-제거하였습니다" class="headerlink" title="실제로는 위의 코드보다 복잡했지만, 예시에 불필요한 부분은 제거하였습니다."></a>실제로는 위의 코드보다 복잡했지만, 예시에 불필요한 부분은 제거하였습니다.</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MPA(Multi Page Application)에서 Vue를 적용 시키던중&lt;/p&gt;
&lt;p&gt;부모-자식간의 관계가 아닌 컴포넌트 간의 동작에 따른 데이터 변화와 이벤트 처리가 필요해졌습니다.&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://hodory.dev/categories/Javascript/"/>
    
      <category term="Vue.js" scheme="https://hodory.dev/categories/Javascript/Vue-js/"/>
    
    
      <category term="JS" scheme="https://hodory.dev/tags/JS/"/>
    
      <category term="VueJS" scheme="https://hodory.dev/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>［GCP］ Nuxt.js GAE에 배포 이슈사항</title>
    <link href="https://hodory.dev/2018/07/20/deploy-nuxt-to-GAE/"/>
    <id>https://hodory.dev/2018/07/20/deploy-nuxt-to-GAE/</id>
    <published>2018-07-20T05:45:42.000Z</published>
    <updated>2019-05-10T15:38:07.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h2><p>배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데</p><p>에러 로그를 보니 localhost:8080로 접근하고 있었다<br><a id="more"></a></p><p>검색 결과 NuxtJS의 실행 포트를 변경할 수 있는 방법이 소개 되어있었다.</p><p>package.json에 다음과 같이 작성하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">    &quot;nuxt&quot;: &#123;</span><br><span class="line">      &quot;host&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">      &quot;port&quot;: &quot;8080&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;start&quot;: &quot;HOST=0.0.0.0 PORT=8080 nuxt build &amp;&amp; nuxt start&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>으로 작성하여 다시 deploy 하면 정상적으로 동작한다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://github.com/nuxt/nuxt.js/issues/344" title="해당 링크로 이동" target="_blank" rel="noopener">NuxtJS Github ISSUE - 334(Google Cloud Deployment)</a></li><li><a href="https://ko.nuxtjs.org/faq/host-port/" title="해당 링크로 이동" target="_blank" rel="noopener">NuxtJS FAQ - host 와 port 번호를 변경하려면?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;502-Bad-Gateway&quot;&gt;&lt;a href=&quot;#502-Bad-Gateway&quot; class=&quot;headerlink&quot; title=&quot;502 Bad Gateway&quot;&gt;&lt;/a&gt;502 Bad Gateway&lt;/h2&gt;&lt;p&gt;배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데&lt;/p&gt;
&lt;p&gt;에러 로그를 보니 localhost:8080로 접근하고 있었다&lt;br&gt;
    
    </summary>
    
      <category term="ETC" scheme="https://hodory.dev/categories/ETC/"/>
    
      <category term="GCP" scheme="https://hodory.dev/categories/ETC/GCP/"/>
    
    
      <category term="GCP" scheme="https://hodory.dev/tags/GCP/"/>
    
      <category term="GAE" scheme="https://hodory.dev/tags/GAE/"/>
    
      <category term="NuxtJS" scheme="https://hodory.dev/tags/NuxtJS/"/>
    
  </entry>
  
  <entry>
    <title>［Database］ postgresql와 mysql 뭐가 다를까?</title>
    <link href="https://hodory.dev/2018/04/23/pgsql-vs-mysql/"/>
    <id>https://hodory.dev/2018/04/23/pgsql-vs-mysql/</id>
    <published>2018-04-23T08:22:45.000Z</published>
    <updated>2019-04-20T16:02:46.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PostgreSQL-과-MySQL의-차이점"><a href="#PostgreSQL-과-MySQL의-차이점" class="headerlink" title="PostgreSQL 과 MySQL의 차이점"></a>PostgreSQL 과 MySQL의 차이점</h3><ul><li>PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.)</li><li>Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.)<a id="more"></a><ul><li>스키마를 별도로 지정하지 않을 경우, public이라는 스키마를 기본적으로 사용합니다.</li><li>데이터베이스가 다르면 물리적으로 분리되어있다는것을 의미합니다.</li><li>서로 다른 Schema간에는 JOIN이 가능합니다.</li><li>구조 <img src="/images/postgresql-structure.jpg" alt="pgSQL 구조 이미지"></li></ul></li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="http://www.gurubee.net/lecture/2942" title="해당 페이지로 이동" target="_blank" rel="noopener">postgreSQL 구조 이미지 - 구루비</a></li><li><a href="http://blog.naver.com/alice_k106/220847310053" title="해당 페이지로 이동" target="_blank" rel="noopener">postgreSQL 소개</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PostgreSQL-과-MySQL의-차이점&quot;&gt;&lt;a href=&quot;#PostgreSQL-과-MySQL의-차이점&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL 과 MySQL의 차이점&quot;&gt;&lt;/a&gt;PostgreSQL 과 MySQL의 차이점&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.)&lt;/li&gt;
&lt;li&gt;Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.)
    
    </summary>
    
      <category term="ETC" scheme="https://hodory.dev/categories/ETC/"/>
    
      <category term="Database" scheme="https://hodory.dev/categories/ETC/Database/"/>
    
    
      <category term="DataBase" scheme="https://hodory.dev/tags/DataBase/"/>
    
      <category term="postgresql" scheme="https://hodory.dev/tags/postgresql/"/>
    
      <category term="pgsql" scheme="https://hodory.dev/tags/pgsql/"/>
    
      <category term="mysql" scheme="https://hodory.dev/tags/mysql/"/>
    
      <category term="pgSQL vs MySQL" scheme="https://hodory.dev/tags/pgSQL-vs-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ PHP4.x 버전과 PHP 5.x 버전 비교(Comparison between PHP4 and PHP5)</title>
    <link href="https://hodory.dev/2018/04/20/php4-vs-php5/"/>
    <id>https://hodory.dev/2018/04/20/php4-vs-php5/</id>
    <published>2018-04-19T17:04:12.000Z</published>
    <updated>2019-05-12T07:11:32.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP5에서-무엇이-바뀌었을까"><a href="#PHP5에서-무엇이-바뀌었을까" class="headerlink" title="PHP5에서 무엇이 바뀌었을까?"></a>PHP5에서 무엇이 바뀌었을까?</h3><ul><li>젠드엔진2가 내장되었습니다.</li><li>PHP GCI 버전이 <code>php.exe</code> 에서 <code>php-cgi.exe</code> 로 변경되었습니다.</li><li>PHP CLI 버전이 <code>cli/php.exe</code> 에서 주 디렉토리로 변경되었습니다.</li><li>PHP CLI 버전은 <code>php.ini</code> 지시어 설정과 상관없이 항상 전역 <code>$argv</code>(Array of arguments passed to script) 와 <code>$argc</code>(The number of arguments passed to script) 변수를 가지며, <code>register_argc_argv</code>(argv와 argc 변수를 선언할지 여부 설정)를 <code>off</code>로 설정해도 영향을 미치지 않습니다.<a id="more"></a></li><li>ISAPI 모듈들의 이름이 php4xxx에서 php5xxx로 바뀌었습니다.</li><li>프로퍼티가 없는 객체를 “빈” 것으로 판단하지 않습니다.</li><li>인터페이스 등을 사용할 경우, 사용 전 선언해야합니다.</li><li>포함한 파일에 함수정의가 있을경우, 그 파일이 두번 포함 되었을 때,PHP5에서는 치명적인 오류가 발생합니다. include_once를 사용하길 권장합니다.</li><li>키워드<ul><li>예외처리(try()-catch()-finally()[v5.5~])</li><li>네임스페이스[v5.3~]</li><li>인터페이스(interface,implements)</li><li>추상클래스(abstract)</li><li>접근제어자(private,protected,public)</li><li>instanceof : 객체의 클래스 확인</li><li>clone : 객체 복제</li><li>컴파일 상수<ul><li><code>__NAMESPACE__</code> [v5.3~]</li><li><code>__DIR__</code> [v5.3~]</li></ul></li></ul></li><li>DataBase<ul><li>MySQL 클라이언트 라이브러리를 포함하지 않습니다.</li><li>MySQL 4.1 이상에서 동작하는 <a href="https://php.net/manual/kr/ref.mysqli.php" title="공식 문서로 이동" target="_blank" rel="noopener">MySQLi</a>가 추가되었습니다.</li><li><a href="https://php.net/manual/kr/ref.sqlite.php" target="_blank" rel="noopener">SQLite</a> 확장 모듈이 포함됩니다.</li></ul></li><li>새로운 함수가 추가되었습니다.(New Functions)<ul><li>배열 (9개)<ul><li><a href="https://php.net/manual/kr/function.array-combine.php" target="_blank" rel="noopener">array_combine()</a> : 하나의 배열은 키로, 하나의 배열은 값으로 가지는 배열 생성 합니다.</li><li><a href="https://php.net/manual/kr/function.array-walk-recursive.php" target="_blank" rel="noopener">array_walk_recursive()</a> : 배열의 모든 원소에 사용자 함수를 적용합니다.</li><li>이 외의 7개 함수</li></ul></li><li>iconv (7개)<ul><li><a href="https://php.net/manual/kr/function.iconv-strlen.php" target="_blank" rel="noopener">iconv_strlen()</a> : 문자열의 문자 수를 반환 합니다.</li><li><a href="https://php.net/manual/kr/function.iconv-strpos.php" target="_blank" rel="noopener">iconv_strpos()</a> : haystack에서 needle이 처음으로 나타나는 위치를 찾습니다.</li><li><a href="https://php.net/manual/kr/function.iconv-strrpos.php" target="_blank" rel="noopener">iconv_strrpos()</a> : haystack에서 needle이 마지막으로 나타나는 위치를 찾습니다.</li><li><a href="https://php.net/manual/kr/function.iconv-substr.php" target="_blank" rel="noopener">iconv_substr()</a> : 문자열의 일부를 잘라냅니다.</li><li>이 외의 3개 함수</li></ul></li><li>스트림 (8개)<ul><li><a href="https://php.net/manual/kr/function.stream-copy-to-stream.php" target="_blank" rel="noopener">stream_copy_to_stream()</a> : 한 스트림의 데이터를 다른 스트림으로 복제합니다.</li><li><a href="https://php.net/manual/kr/function.stream-get-line.php" target="_blank" rel="noopener">stream_get_line()</a> : 스트림 자원에서 주어진 구분자로 나타나는 열을 얻습니다.</li><li>이 외의 6개 함수</li></ul></li><li>날짜와 시간 관련 (4개)<ul><li><a href="https://php.net/manual/kr/function.idate.php" target="_blank" rel="noopener">idate()</a> : 지역 날짜/시간을 정수로 바꿉니다.</li><li><a href="https://php.net/manual/kr/function.date-sunset.php" target="_blank" rel="noopener">date_sunset()</a> : 주어진 날짜와 위치의 일몰 시간을 반환합니다.</li><li><a href="https://php.net/manual/kr/function.date-sunrise.php" target="_blank" rel="noopener">date_sunrise()</a> : 주어진 날짜와 위치의 일출 시간을 반환합니다.</li><li><a href="https://php.net/manual/kr/function.time-nanosleep.php" target="_blank" rel="noopener">time_nanosleep()</a> : 초와 나노초의 수만큼 지연합니다.</li></ul></li><li>문자열 (3개)<ul><li><a href="https://php.net/manual/kr/function.str-split.php" target="_blank" rel="noopener">str_split()</a> : 문자열을 배열로 변환합니다.</li><li><a href="https://php.net/manual/kr/function.strpbrk.php" target="_blank" rel="noopener">strbrk()</a> : 문자열에서 문자 세트에 있는 문자를 검색합니다.(대소문자 구분하여 세트중 한글자라도 먼저 나오는것을 찾습니다.)</li><li><a href="https://php.net/manual/kr/function.substr-compare.php" target="_blank" rel="noopener">substr_compare()</a> : 두 문자열을 offset부터 length까지(대소문자 구분없이:옵션) 바이너리로 안전하게 비교합니다.</li></ul></li><li>인터베이스 (19개)</li><li>기타 (30개)<ul><li><a href="https://php.net/manual/kr/function.file-put-contents.php" target="_blank" rel="noopener">file_put_contents()</a> : 문자열을 파일로 씁니다.</li><li><a href="https://php.net/manual/kr/function.get-headers.php" target="_blank" rel="noopener">get_headers()</a> : HTTP 요청의 응답으로 서버가 보낸 모든 헤더를 가져옵니다.</li><li><a href="https://php.net/manual/kr/function.http-build-query.php" target="_blank" rel="noopener">http_build_query()</a> : 배열을 이용하여 URL-encode한 쿼리 문자열을 생성합니다.</li><li><a href="https://php.net/manual/kr/function.scandir.php" target="_blank" rel="noopener">scandir()</a> : 지정한 경로 안에 파일과 디렉토리 목록을 배열로 반환합니다.</li><li>이 외의 27개 함수</li></ul></li><li>자세한 내용은 <a href="https://php.net/manual/kr/migration5.functions.php" target="_blank" rel="noopener">해당링크</a>에서 확인 하실 수 있습니다.</li></ul></li><li>새로운 지시어 (<code>php.ini</code> 지시어)<ul><li>mail.force_extra_parameter</li><li><a href="https://php.net/manual/kr/ini.core.php#ini.register-long-arrays" target="_blank" rel="noopener">register_long_arrays</a></li><li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-function" target="_blank" rel="noopener">session.hash_function</a> : 해시 함수 선택(MD5 or SHA-1)</li><li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-bits-per-character" target="_blank" rel="noopener">session.hash_bits_per_character</a></li><li><a href="https://php.net/manual/kr/ini.core.php#ini.zend.ze1-compatibility-mode" target="_blank" rel="noopener">zend.ze1_compatibility_mode</a> : 젠드엔진1 (PHP 4)호환모드 활성화</li></ul></li></ul><h5 id="기타-자세한-사항은-해당링크에서-확인-하실-수-있습니다"><a href="#기타-자세한-사항은-해당링크에서-확인-하실-수-있습니다" class="headerlink" title="기타 자세한 사항은 해당링크에서 확인 하실 수 있습니다."></a>기타 자세한 사항은 <a href="https://php.net/manual/kr/migration5.php" target="_blank" rel="noopener">해당링크</a>에서 확인 하실 수 있습니다.</h5><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://php.net/manual/kr/migration5.php" title="해당 링크로 이동" target="_blank" rel="noopener">PHP 공식문서 - PHP4에서 PHP 5.0.x로 이행</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP5에서-무엇이-바뀌었을까&quot;&gt;&lt;a href=&quot;#PHP5에서-무엇이-바뀌었을까&quot; class=&quot;headerlink&quot; title=&quot;PHP5에서 무엇이 바뀌었을까?&quot;&gt;&lt;/a&gt;PHP5에서 무엇이 바뀌었을까?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;젠드엔진2가 내장되었습니다.&lt;/li&gt;
&lt;li&gt;PHP GCI 버전이 &lt;code&gt;php.exe&lt;/code&gt; 에서 &lt;code&gt;php-cgi.exe&lt;/code&gt; 로 변경되었습니다.&lt;/li&gt;
&lt;li&gt;PHP CLI 버전이 &lt;code&gt;cli/php.exe&lt;/code&gt; 에서 주 디렉토리로 변경되었습니다.&lt;/li&gt;
&lt;li&gt;PHP CLI 버전은 &lt;code&gt;php.ini&lt;/code&gt; 지시어 설정과 상관없이 항상 전역 &lt;code&gt;$argv&lt;/code&gt;(Array of arguments passed to script) 와 &lt;code&gt;$argc&lt;/code&gt;(The number of arguments passed to script) 변수를 가지며, &lt;code&gt;register_argc_argv&lt;/code&gt;(argv와 argc 변수를 선언할지 여부 설정)를 &lt;code&gt;off&lt;/code&gt;로 설정해도 영향을 미치지 않습니다.
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
      <category term="PHP5" scheme="https://hodory.dev/tags/PHP5/"/>
    
      <category term="PHP4" scheme="https://hodory.dev/tags/PHP4/"/>
    
  </entry>
  
  <entry>
    <title>［Algorithm］이진탐색 알고리즘(Binary Search Algorithm)</title>
    <link href="https://hodory.dev/2018/04/19/binary-search/"/>
    <id>https://hodory.dev/2018/04/19/binary-search/</id>
    <published>2018-04-19T03:54:39.000Z</published>
    <updated>2019-04-20T15:57:39.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="이진탐색"><a href="#이진탐색" class="headerlink" title="이진탐색"></a>이진탐색</h3><ul><li>정의<ul><li>오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것.</li><li>오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다.<a id="more"></a></li></ul></li><li>구현<ul><li>해당 배열에서 가운데 값을 찾고, 그 값과 비교하여 해당 인덱스에서의 배열의 값이 찾는 값 보다 클때는 앞쪽에서 찾고, 작을때는 뒤쪽에서 찾으면 된다.</li><li>코드</li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 해당 인덱스를 출력해주는 알고리즘 입니다.</span></span><br><span class="line">binarSearch = <span class="function">(<span class="params">data, value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> start = data[<span class="number">0</span>], end = data.slice(<span class="number">-1</span>)[<span class="number">0</span>], index = <span class="number">0</span>, last = data.length<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> (value &lt; start || value &gt; end)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt;= last) &#123;</span><br><span class="line"><span class="keyword">let</span> center = <span class="built_in">parseInt</span>((index+last) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (data[center] === value)</span><br><span class="line"><span class="keyword">return</span> center;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(data[center] &gt; value)</span><br><span class="line"><span class="comment">// 해당 인덱스의 배열값이 더 크기때문에 최대 인덱스를 줄인다.</span></span><br><span class="line">last = center - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">// 해당 인덱스의 배열값이 더 작기때문에 최소 인덱스를 늘린다.</span></span><br><span class="line">index = center + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 호출</span></span><br><span class="line">binarSearch([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">25</span>],<span class="number">25</span>) <span class="comment">// 4</span></span><br><span class="line">binarSearch([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">25</span>],<span class="number">18</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://ko.wikipedia.org/wiki/이진_검색_알고리즘" title="해당 링크로 이동" target="_blank" rel="noopener">위키백과</a></li><li><a href="https://namu.wiki/w/이진%20탐색" title="해당 링크로 이동" target="_blank" rel="noopener">나무위키</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;이진탐색&quot;&gt;&lt;a href=&quot;#이진탐색&quot; class=&quot;headerlink&quot; title=&quot;이진탐색&quot;&gt;&lt;/a&gt;이진탐색&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;정의&lt;ul&gt;
&lt;li&gt;오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것.&lt;/li&gt;
&lt;li&gt;오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다.
    
    </summary>
    
      <category term="ETC" scheme="https://hodory.dev/categories/ETC/"/>
    
      <category term="Algorithm" scheme="https://hodory.dev/categories/ETC/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://hodory.dev/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>［ETC］Triple DES(3-DES)를 사용하지 않는 이유</title>
    <link href="https://hodory.dev/2018/04/18/why-not-use-3des/"/>
    <id>https://hodory.dev/2018/04/18/why-not-use-3des/</id>
    <published>2018-04-18T09:27:20.000Z</published>
    <updated>2019-04-20T15:59:00.568Z</updated>
    
    <content type="html"><![CDATA[<p>대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다.</p><p>DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다.</p><p>그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요?</p><ul><li>암호화키가 DES 표준에 따라 56비트로 제한됩니다.</li><li>AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다.</li><li>암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.)<a id="more"></a>결론적으로 대칭키 암호화 알고리즘에서는 DES 암호화 알고리즘을 AES 암호화 알고리즘이 대체하게 되어 없어졌다 할 수 있습니다.</li></ul><p>기존에는 SHA-2 알고리즘이 나와 없어진 줄 알았으나,</p><p>SHA(Secure Hash Algorithm) Encryption(암호화)과 Hash(해쉬)는 다른 의미였습니다.</p><p>Encryption(암호화)는 양방향 통신을 위해 특정 키를 가지고 복호화가 가능한 출력을 만들어 내는 것입니다.</p><p>대표적으로는 아래와 같이 있습니다.</p><ul><li>대칭 암호화<ul><li>DES(Data Encryption Standard)<ul><li>T-DES(Triple Data Encryption Standard)</li></ul></li><li>AES(Advanced Encryption Standard)</li></ul></li><li>비대칭 암호화<ul><li>RSA</li></ul></li></ul><p>Hash(해시)는 임의의 길이의 입력을 고정된 길이의 출력으로 바꾸어주고, 복호화가 되지않아 원문을 알 수 없으나, 같은 입력은 같은 출력을 보장합니다.</p><p>대표적으로는 아래와 같이 있습니다.</p><ul><li>MD5(Message Digest)</li><li>SHA(Secure Hash Algorithm)</li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://www.chaijeom.com/3/919.html" title="해당 링크로 이동" target="_blank" rel="noopener">AES와 3DES의 차이점</a></li><li><a href="https://egloos.zum.com/dextermg/v/305974" title="해당 링크로 이동" target="_blank" rel="noopener">대칭키 암호화 - AES, 3DES</a></li><li><a href="https://brownbears.tistory.com/73" title="해당 링크로 이동" target="_blank" rel="noopener">AES와 SHA 차이</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다.&lt;/p&gt;
&lt;p&gt;DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다.&lt;/p&gt;
&lt;p&gt;그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;암호화키가 DES 표준에 따라 56비트로 제한됩니다.&lt;/li&gt;
&lt;li&gt;AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다.&lt;/li&gt;
&lt;li&gt;암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.)
    
    </summary>
    
      <category term="ETC" scheme="https://hodory.dev/categories/ETC/"/>
    
    
      <category term="Etc." scheme="https://hodory.dev/tags/Etc/"/>
    
      <category term="Security" scheme="https://hodory.dev/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>［Algorithm］반복문 없이 1부터 10까지 합 구하기</title>
    <link href="https://hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/"/>
    <id>https://hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/</id>
    <published>2018-04-18T06:53:47.000Z</published>
    <updated>2019-05-09T15:30:59.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1부터-10까지-합-구하기"><a href="#1부터-10까지-합-구하기" class="headerlink" title="1부터 10까지 합 구하기"></a>1부터 10까지 합 구하기</h3><blockquote><p>먼저 방법은 무엇이 있을까?</p><ul><li>등차 수열의 합</li><li>재귀함수 방식</li><li>기타 등등…</li></ul></blockquote><p>  하나씩 구현해보자<br><a id="more"></a></p><ul><li>등차 수열<ul><li>등차 수열이란 ?<br>연속하는 두 항의 차이가 모두 일정한 수열.</li><li>등차 수열의 합 공식 (출처 : <a href="https://ko.wikipedia.org/wiki/등차수열" target="_blank" rel="noopener">위키피디아</a>)<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023" alt="등차수열의 합 공식" title="클릭시 위키피디아로 이동"></li><li>코드 구현<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addFunction = <span class="function">(<span class="params">start, end</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (end-start+<span class="number">1</span>)*(start+end)/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">addFunction(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>재귀함수 방식<ul><li>재귀 함수란?자기 자신을 재 참조 하는 함수</li><li>재귀함수 구조(출처 : <a href="https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98" title="클릭시 위키피디아로 이동" target="_blank" rel="noopener">위키피디아</a>)</li><li>ex)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">factorial = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> v * factorial(v<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>코드 구현</li><li>ex)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addFunction = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> v + addFunction(v<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://ko.wikipedia.org/wiki/등차수열" title="해당 링크로 이동" target="_blank" rel="noopener">위키백과 - 등차수열</a></li><li><a href="https://ko.wikipedia.org/wiki/재귀함수" title="해당 링크로 이동" target="_blank" rel="noopener">위키백과 - 재귀함수</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1부터-10까지-합-구하기&quot;&gt;&lt;a href=&quot;#1부터-10까지-합-구하기&quot; class=&quot;headerlink&quot; title=&quot;1부터 10까지 합 구하기&quot;&gt;&lt;/a&gt;1부터 10까지 합 구하기&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;먼저 방법은 무엇이 있을까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;등차 수열의 합&lt;/li&gt;
&lt;li&gt;재귀함수 방식&lt;/li&gt;
&lt;li&gt;기타 등등…&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;  하나씩 구현해보자&lt;br&gt;
    
    </summary>
    
      <category term="ETC" scheme="https://hodory.dev/categories/ETC/"/>
    
      <category term="Algorithm" scheme="https://hodory.dev/categories/ETC/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://hodory.dev/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ PSR(PHP Standards Recommendations)이란?</title>
    <link href="https://hodory.dev/2018/04/18/what-is-psr/"/>
    <id>https://hodory.dev/2018/04/18/what-is-psr/</id>
    <published>2018-04-17T17:28:50.000Z</published>
    <updated>2019-05-12T07:11:32.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PSR이란"><a href="#PSR이란" class="headerlink" title="PSR이란?"></a>PSR이란?</h3><p>PHP Standards Recommendations의 약자로 <a href="https://www.php-fig.org/" title="PHP-FIG로 이동" target="_blank" rel="noopener">PHP-FIG(PHP-FrameWork Interop Group)</a>에서 만든 표준 권고안입니다.</p><ul><li><a href="#PSR-0-DEPRECATED-Autoloading-Standard">PSR-0</a></li><li><a href="#PSR-1-Basic-Coding-Standard">PSR-1</a></li><li><a href="#PSR-2-Coding-Style-Guide">PSR-2</a></li><li><a href="#PSR-3-Logger-Interface">PSR-3</a></li><li><a href="#PSR-4-Autoloader">PSR-4</a><a id="more"></a></li><li>작성예정 목록<ul><li>PSR-6</li><li>PSR-7</li><li>PSR-11</li><li>PSR-13</li><li>PSR-15</li><li>PSR-16</li></ul></li></ul><h4 id="PSR-0-DEPRECATED-Autoloading-Standard"><a href="#PSR-0-DEPRECATED-Autoloading-Standard" class="headerlink" title="PSR-0 (DEPRECATED) : Autoloading Standard"></a>PSR-0 (DEPRECATED) : Autoloading Standard</h4><p>오토로딩 표준으로 PSR-4가 제정되며 DEPRECATED 되었습니다.</p><ul><li><code>\&lt;Vendor Name&gt;\(&lt;NameSpace&gt;\)*&lt;Class Name&gt;</code>의 구조를 따릅니다.</li><li>각 네임스페이스는 <code>(&quot;Vendor Name&quot;)</code>이 최상위 네임스페이스로 있어야합니다.</li><li>각 네임스페이스는 원하는 만큼 하위 네임스페이스를 가질 수 있습니다.</li><li>각 네임스페이스 구분자는 파일시스템에서 로딩될때 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li><li>클래스명의 각 <code>_</code> 문자는 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li><li>기타 자세한 사항은 <a href="https://www.php-fig.org/psr/psr-0/" title="PSR-0 문서로 이동" target="_blank" rel="noopener">PSR-0</a>에서 확인 가능합니다.</li></ul><h5 id="Example"><a href="#Example" class="headerlink" title="Example)"></a>Example)</h5><p><code>\Doctrine\Commone\IsolatedClassLoader</code><br><code>=&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</code><br><code>\Symfony\Core\Request</code><br><code>=&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php</code></p><h4 id="PSR-1-Basic-Coding-Standard"><a href="#PSR-1-Basic-Coding-Standard" class="headerlink" title="PSR-1 : Basic Coding Standard"></a>PSR-1 : Basic Coding Standard</h4><p>PHP 코드를 공유하는데 있어 기술적 상호 운용성을 위해 고려 해야 할 표준 코딩 가이드입니다.</p><ul><li><code>&lt;?php</code> 와  <code>&lt;?=</code> 태그만 사용해야합니다.</li><li>PHP 코드에는 BOM(Byte Order Mark) 없이 UTF-8로만 사용해야합니다.</li><li>네임스페이스와 클래스는 PSR(PSR-0, PSR-4)의 오토로딩을 따라야합니다.<ul><li>클래스명은 <code>StudlyCaps</code> 와 같이 첫글자를 대문자로 합니다.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// PHP 5.3 이후 버전</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PHP 5.3 이전 버전</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vendor_Model_Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>상수는 <code>_</code>를 구분자로 대문자로 선언해야합니다. <code>ex)const CURRENT_VERSION = 1.0;</code></li><li>프로퍼티명에 대한 규칙은 정해져 있지않으나, 스코프에서 일관적이어야합니다.</li><li>메소드는 카멜케이스를 사용해야합니다. <code>ex)camelCase()</code></li></ul><h4 id="PSR-2-Coding-Style-Guide"><a href="#PSR-2-Coding-Style-Guide" class="headerlink" title="PSR-2 : Coding Style Guide"></a>PSR-2 : Coding Style Guide</h4><p>PSR-1의 확장으로 표준 코딩 스타일 가이드를 다룹니다.</p><ul><li>PSR-1을 따라야합니다.</li><li>들여쓰기 할때는 탭을 사용하지 않고 스페이스 4개를 사용합니다.</li><li>라인 수에 대한 엄격한 제한은 아니지만, 한 줄에는 120자 이하, 라인 수는 80개 이하로 작성합니다.</li><li>namespace선언과 use 선언들 후에는 한줄을 띄워 작성합니다.</li><li>클래스와 메소드들의 여는 괄호는 다음줄에 작성하고, 닫는 괄호는 내용이 끝난 다음 줄에 작성합니다.<ul><li>ex)<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">BazClass</span> <span class="title">as</span> <span class="title">Baz</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> <span class="keyword">extends</span> <span class="title">Baz</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alert</span><span class="params">($msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>모든 프로퍼티와 메소드는 접근제어자가 선언되어야합니다.<ul><li>abstract와 final 키워드는 접근제어자 이전에 선언되고, static 키워드는 접근제어자 이후에 선언되어야합니다.</li></ul></li><li>제어문은 사이에 스페이스가 있어야합니다.<ul><li>메소드와 함수호출은 그렇지 않습니다.</li><li>ex)<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($a === $b) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"equal"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Foo(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>PHP 파일은 빈 줄로 끝나야 하며, PHP로만 이루어진 파일은 닫는 태그인 <code>?&gt;</code>를 생략해야합니다.</li></ul><h4 id="PSR-3-Logger-Interface"><a href="#PSR-3-Logger-Interface" class="headerlink" title="PSR-3 : Logger Interface"></a>PSR-3 : Logger Interface</h4><p>로깅 라이브러리의 공통적인 인터페이스를 명세합니다.<br>라이브러리가 <code>Psr\Log\LoggerInterface</code>의 객체를 받아 간편하고 보편적인 방법으로 그것에 로그를 작성할 수 있도록 하는것이 목표입니다.</p><ul><li>로거 인터페이스는 8개의 <a href="https://tools.ietf.org/html/rfc5424" target="_blank" rel="noopener">RFC 5424</a> 레벨(debug, info, notice, warning, error, critical, alert, emergency)로 로그 작성을 하기 위한 메소드를 제공합니다.</li><li>9번째 메소드인 <code>log</code>는 첫번째 인자로 로그 레벨을 받고, 호출시 해당 레벨의 메소드를 호출하는것과 같은 결과를 가집니다.<ul><li>해당 레벨의 메소드가 정의되어 있지 않는 경우, <code>Psr\Log\InvalidArgumentException</code> 에러를 보내야합니다.</li></ul></li><li>모든 메소드는 string 형식의 메시지를 받거나, __toString() 처리 된 object를 받습니다.</li><li>컨텍스트에 주어진 값을 execption에 보내거나, php error나 warning, notice로 보내면 안됩니다.</li></ul><h4 id="PSR-4-Autoloader"><a href="#PSR-4-Autoloader" class="headerlink" title="PSR-4 : Autoloader"></a>PSR-4 : Autoloader</h4><p>파일 경로를 통해 클래스를 오토로딩 하기위한 명세로, PSR-0를 포함하고 있습니다.</p><ul><li><code>class</code>라는 용어는 클래스와 인터페이스, 트레이트 또는 다른 비슷한 구조들을 의미합니다.</li><li>정규화 된 클래스명의 형식은 다음을 따릅니다.<ul><li><code>\&lt;NamespaceName&gt;(\&lt;SubNamespaceNames&gt;)*\&lt;ClassName&gt;</code><ul><li>네임스페이스의 맨 처음은 “Vendor namespace”로 알려진것으로 시작합니다.</li><li>하나 이상의 서브네임스페이스명을 가집니다.</li><li>끝을 클래스명으로 작성 합니다.</li><li>소문자와 대문자의 조합을 혼합하여 작성할 수 있습니다.</li><li>대소문자를 구분하여 참조해야합니다.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// guzzle/src/ClientInterface.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Exception</span>\<span class="title">GuzzleException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClientInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>GuzzleHttp\Exception\GuzzleException은<br>GuzzleHttp의 Base-Directory(src) 안에 있는 Exception\GuzzleException.php에 위치합니다.</p><!-- #### PSR-6#### PSR-7#### PSR-11#### PSR-13#### PSR-15#### PSR-16 --><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://www.php-fig.org/psr/" title="해당 링크로 이동" target="_blank" rel="noopener">PSR 공식문서</a></li><li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=24445325" title="해당 링크로 이동" target="_blank" rel="noopener">PHP 표준 권고(PSR) - 정광섭님</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PSR이란&quot;&gt;&lt;a href=&quot;#PSR이란&quot; class=&quot;headerlink&quot; title=&quot;PSR이란?&quot;&gt;&lt;/a&gt;PSR이란?&lt;/h3&gt;&lt;p&gt;PHP Standards Recommendations의 약자로 &lt;a href=&quot;https://www.php-fig.org/&quot; title=&quot;PHP-FIG로 이동&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP-FIG(PHP-FrameWork Interop Group)&lt;/a&gt;에서 만든 표준 권고안입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-0-DEPRECATED-Autoloading-Standard&quot;&gt;PSR-0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-1-Basic-Coding-Standard&quot;&gt;PSR-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-2-Coding-Style-Guide&quot;&gt;PSR-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-3-Logger-Interface&quot;&gt;PSR-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-4-Autoloader&quot;&gt;PSR-4&lt;/a&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
      <category term="PSR" scheme="https://hodory.dev/tags/PSR/"/>
    
  </entry>
  
  <entry>
    <title>［JS］ ES5와 ES6 뭐가 다를까?</title>
    <link href="https://hodory.dev/2018/04/17/es5-vs-es6/"/>
    <id>https://hodory.dev/2018/04/17/es5-vs-es6/</id>
    <published>2018-04-16T16:26:53.000Z</published>
    <updated>2019-05-12T07:13:37.763Z</updated>
    
    <content type="html"><![CDATA[<p>ES5와 ES6를 비교 할겸<br>ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다.</p><ul><li><a href="#Const-변수">Const Variables</a></li><li><a href="#let-변수">let Variables</a></li><li><a href="#Block-Scoped-함수">Block-Scoped Function</a><a id="more"></a></li><li><a href="#Arrow-Function">Arrow Function</a></li><li><a href="#Default-Parameter">Default Parameter</a></li><li><a href="#Rest-Parameter">Rest Parameter</a></li><li><a href="#Spread-Operator">Spread Operator</a></li><li><a href="#Template-Literals">Template Literals</a></li><li><a href="#Enhanced-Object-Properties">Ehhanced Object Properties</a><ul><li><a href="#Property-Shorthand">Property Shorthand</a></li><li><a href="#Computed-Property-Names">Computed Property Names</a></li><li><a href="#Method-Properties">Method Properties</a></li></ul></li><li><a href="#Export-Import">Export / Import</a></li><li><a href="#Class-Definition">Class Definition</a></li><li><a href="#Promise">Promise</a><ul><li><a href="#Promise-all-을-이용합니다">Promise all</a></li></ul></li></ul><h3 id="Const-변수"><a href="#Const-변수" class="headerlink" title="Const 변수"></a>Const 변수</h3><p>Immutable varibale인 Const 변수(상수 변수)를 지원합니다.(블록-스코프 변수)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592</span></span><br><span class="line"><span class="built_in">console</span>.log(PI) <span class="comment">// 3.141592</span></span><br></pre></td></tr></table></figure><h3 id="let-변수"><a href="#let-변수" class="headerlink" title="let 변수"></a>let 변수</h3><p>기존의 함수-스코프였던 변수와 다르게 Hoisting 없는 블록-스코프 변수를 지원합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'for loop start'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i : '</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'for loop end i : '</span> + i) <span class="comment">// for loop end i : 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'j : '</span>, j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">counter()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'j : '</span>, j) <span class="comment">// j is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'for loop start'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i : '</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'for loop end i : '</span> + i) <span class="comment">// j is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'j : '</span>, j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">counter()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'j : '</span>,j) <span class="comment">// j is not defined</span></span><br></pre></td></tr></table></figure><p>또한 var 변수는 재선언,재할당이 가능하지만 let 변수는 재선언이 불가능합니다 (const 변수는 immutable variable이므로 재할당도 불가능)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hoisting으로 ReferenceError가 나지않는다.</span></span><br><span class="line">b = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">var</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">'bar'</span> <span class="comment">// Uncaught SyntaxError: Identifier 'c' has already been declared</span></span><br><span class="line">c = <span class="string">'bar'</span> <span class="comment">// "bar"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="string">'bar'</span> <span class="comment">// Uncaught SyntaxError: Identifier 'd' has already been declared</span></span><br><span class="line">d = <span class="string">'bar'</span> <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="Block-Scoped-함수"><a href="#Block-Scoped-함수" class="headerlink" title="Block-Scoped 함수"></a>Block-Scoped 함수</h3><p>블록-스코프 함수 정의 방식 개선<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(foo()) <span class="comment">// 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span> &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(foo()) <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(foo()) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">    foo() === <span class="number">1</span>;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">        foo() === <span class="number">2</span>;</span><br><span class="line">    &#125;)();</span><br><span class="line">    foo() === <span class="number">1</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><p><code>function</code>과 <code>return</code>을 묶어 화살표 함수로 변형 가능합니다<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">nums = evens.map(<span class="function">(<span class="params">v,i</span>) =&gt;</span> v+i)</span><br><span class="line"><span class="keyword">this</span>.nums.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">this</span>.evens.push(v)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">nums = evens.map(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123; <span class="keyword">return</span> v+i; &#125;);</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.nums.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">        self.evens.push(v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="디폴트-파라미터"><a href="#디폴트-파라미터" class="headerlink" title="디폴트 파라미터"></a>디폴트 파라미터</h3><p>타 언어에서 사용 할 수 있었던 디폴트 파라미터가 지원됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x, y=<span class="number">2</span>, z=<span class="number">3</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y === <span class="literal">undefined</span>)</span><br><span class="line">        y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(z === <span class="literal">undefined</span>)</span><br><span class="line">        z = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line">foo(<span class="number">1</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="Rest-Parameter"><a href="#Rest-Parameter" class="headerlink" title="Rest Parameter"></a>Rest Parameter</h3><p>지정되지 않은 매개변수 집합을 하나의 변수에 담을 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x, y, ...a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x * y) + a.length</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"baz"</span>, <span class="literal">true</span> , <span class="number">3</span>, [<span class="number">2</span>]) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> (x * y) + a.length;</span><br><span class="line">&#125;;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"baz"</span>, <span class="literal">true</span> , <span class="number">3</span>, [<span class="number">2</span>]); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="Spread-Operator-전개연산자"><a href="#Spread-Operator-전개연산자" class="headerlink" title="Spread Operator (전개연산자)"></a>Spread Operator (전개연산자)</h3><p>2개 이상의 인수나 2개이상의 요소 또는 2개이상의 변수가 해당되는 곳에 확장 될 수 있도록 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params">x, y, z</span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> params = [ <span class="string">"Foo"</span>, <span class="literal">true</span>, <span class="number">2</span> ]</span><br><span class="line"><span class="keyword">let</span> others = [ <span class="number">1</span>, <span class="number">2</span>, ...params ] <span class="comment">// [ 1, 2, "Foo" ,true, 2 ]</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"Bar"</span></span><br><span class="line"><span class="keyword">let</span> chars = [ ...str ] <span class="comment">// [ "B", "a", "r"]</span></span><br><span class="line">myFunc(<span class="number">1</span>, <span class="number">2</span>, ...params);</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> params = [ <span class="string">"Foo"</span>, <span class="literal">true</span>, <span class="number">2</span> ];</span><br><span class="line"><span class="keyword">var</span> others = [ <span class="number">1</span>, <span class="number">2</span> ].concat(params); <span class="comment">// [ 1, 2, "Foo" ,true, 2 ]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"Bar"</span>;</span><br><span class="line"><span class="keyword">var</span> chars = str.split(<span class="string">""</span>); <span class="comment">// [ "B", "a", "r"]</span></span><br><span class="line">myFunc.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>].concat(params));</span><br></pre></td></tr></table></figure><h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>문자열 다중 행 처리와 보간문자 처리를 할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span> : <span class="string">"Foo"</span> &#125;</span><br><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">id</span>: <span class="string">"bar"</span>, <span class="attr">email</span>: <span class="string">"Foo@example.com"</span>&#125;</span><br><span class="line"><span class="keyword">let</span> userInfo = <span class="string">`Hello <span class="subst">$&#123;user.name&#125;</span>.</span></span><br><span class="line"><span class="string">Your ID is <span class="subst">$&#123;info.id&#125;</span> </span></span><br><span class="line"><span class="string">and email is <span class="subst">$&#123;info.email&#125;</span>.`</span></span><br><span class="line"><span class="comment">// Hello Foo.</span></span><br><span class="line"><span class="comment">// Your ID is bar</span></span><br><span class="line"><span class="comment">// and email is Foo@example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> user = &#123; <span class="attr">name</span> : <span class="string">"Foo"</span> &#125;</span><br><span class="line"><span class="keyword">var</span> info = &#123; <span class="attr">id</span>: <span class="string">"bar"</span>, <span class="attr">email</span>: <span class="string">"Foo@example.com"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> userInfo = <span class="string">"Hello "</span> + user.name + <span class="string">".\n"</span>+</span><br><span class="line"><span class="string">"Your ID is "</span> + info.id + <span class="string">"\n"</span></span><br><span class="line"><span class="string">"and email is "</span>+info.email+<span class="string">"."</span>;</span><br></pre></td></tr></table></figure></p><h3 id="Enhanced-Object-Properties"><a href="#Enhanced-Object-Properties" class="headerlink" title="Enhanced Object Properties"></a>Enhanced Object Properties</h3><h5 id="Property-Shorthand"><a href="#Property-Shorthand" class="headerlink" title="Property Shorthand"></a>Property Shorthand</h5><p>공통 객체 속성 정의를 간결하게 할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">0</span></span><br><span class="line">obj = &#123;x, y&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">obj = &#123;<span class="attr">x</span>: x , <span class="attr">y</span>: y&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="Computed-Property-Names"><a href="#Computed-Property-Names" class="headerlink" title="Computed Property Names"></a>Computed Property Names</h5><p>Object 프로퍼티 정의에 계산된 이름을 지원합니다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    foo: <span class="string">"Bar"</span>,</span><br><span class="line">    [<span class="string">"Baz"</span> + myFunc() ]: <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    foo: <span class="string">"Bar"</span></span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="string">"Baz"</span> + myFunc() ] = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><h5 id="Method-Properties"><a href="#Method-Properties" class="headerlink" title="Method Properties"></a>Method Properties</h5><p>일반적인 함수와 제너레이터 함수의 Object 프로퍼티 정의에 메소드를 표기할 수 있도록 지원합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">obj = &#123;</span><br><span class="line">    foo (a, b) &#123;&#125;,</span><br><span class="line">    bar (x ,y) &#123;&#125;,</span><br><span class="line">    *baz (x, y) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">obj = &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;&#125;,</span><br><span class="line">    bar : <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// baz : es5에서는 대체할 것이 없습니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Export-Import"><a href="#Export-Import" class="headerlink" title="Export / Import"></a>Export / Import</h3><p>값을 export/import로 모듈에 가져오거나 모듈로 내보낼 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">x ,y</span>) </span>&#123; <span class="keyword">return</span> x + y &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141592</span></span><br><span class="line"><span class="comment">// Foo.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"lib/math"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2pi = "</span> + math.sum(math.pi, math.pi))</span><br><span class="line"><span class="comment">// Bar.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum, pi &#125; <span class="keyword">from</span> <span class="string">"lib/math"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2pi = "</span> + sum(pi,pi))</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line">LibMath = &#123;&#125;;</span><br><span class="line">LibMath.sum = <span class="function"><span class="keyword">function</span> (<span class="params">x ,y</span>) </span>&#123; <span class="keyword">return</span> x + y &#125;;</span><br><span class="line">LibMath.pi = <span class="number">3.141592</span>;</span><br><span class="line"><span class="comment">// Foo.js</span></span><br><span class="line"><span class="keyword">var</span> math = LibMath;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2pi = "</span> + math.sum(math.pi, math.pi));</span><br><span class="line"><span class="comment">// Bar.js</span></span><br><span class="line"><span class="keyword">var</span> sum = LibMath.sum, pi = LibMath.pi;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2pi = "</span> + sum(pi,pi));</span><br></pre></td></tr></table></figure><h3 id="Class-Definition"><a href="#Class-Definition" class="headerlink" title="Class Definition"></a>Class Definition</h3><p>클래스를 지원합니다 (이외에도 상속, 오버로딩, 정적 클래스멤버, Getter/Setter를 지원합니다.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    constuctor (id, x ,y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id</span><br><span class="line">        <span class="keyword">this</span>.move(x,y)</span><br><span class="line">    &#125;</span><br><span class="line">    move (x, y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x</span><br><span class="line">        <span class="keyword">this</span>.y = y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params">id, x ,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.move(x, y);</span><br><span class="line">&#125;;</span><br><span class="line">Car.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>비동기 처리 이후 동작을 순차적,또는 병렬로 진행하기 위해 사용하는 클래스. 기존 Callback Hell에서 벗어날 수 있도록 도와줍니다(잘 구현 했을 경우….)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> _promise = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            resolve(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">_promise()</span><br><span class="line">    .then(</span><br><span class="line">        (res) =&gt; &#123;</span><br><span class="line">            <span class="comment">//success일때 처리</span></span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line">            <span class="comment">//reject 일때 처리</span></span><br><span class="line">            <span class="built_in">console</span>.error(err)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">_promise()</span><br><span class="line">    .then(...)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>여러개의 프로미스가 모두 완료 될때 실행하려면요?</p></blockquote></blockquote><h5 id="Promise-all-을-이용합니다"><a href="#Promise-all-을-이용합니다" class="headerlink" title="Promise-all 을 이용합니다."></a>Promise-all 을 이용합니다.</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            resolve(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">let</span> _promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            resolve(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([_promise1, _promise2]).then(</span><br><span class="line">    (res) =&gt; &#123;</span><br><span class="line">        <span class="comment">// resolve 된 결과 처리</span></span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">        <span class="comment">// reject 된 결과 처리</span></span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _promise1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            resolve(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> _promise2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            resolve(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([_promise1(), _promise2()]).then(</span><br><span class="line">    (res) =&gt; &#123;</span><br><span class="line">        <span class="comment">// resolve 된 결과 처리</span></span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">        <span class="comment">// reject 된 결과 처리</span></span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" title="해당 링크로 이동" target="_blank" rel="noopener">MDN</a></li><li><a href="http://es6-features.org" target="_blank" rel="noopener">ES-6 기능 소개</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a><ul><li><a href="http://webframeworks.kr/tutorials/translate/es6-promise-api-1/" title="링크로 이동" target="_blank" rel="noopener">ES6 Promises(1) - the API</a></li><li><a href="https://programmingsummaries.tistory.com/325" title="링크로 이동" target="_blank" rel="noopener">도대체 Promise는 어떻게 쓰는거야?</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES5와 ES6를 비교 할겸&lt;br&gt;ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Const-변수&quot;&gt;Const Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#let-변수&quot;&gt;let Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Block-Scoped-함수&quot;&gt;Block-Scoped Function&lt;/a&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://hodory.dev/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://hodory.dev/tags/Javascript/"/>
    
      <category term="JS" scheme="https://hodory.dev/tags/JS/"/>
    
      <category term="ES5" scheme="https://hodory.dev/tags/ES5/"/>
    
      <category term="ES6" scheme="https://hodory.dev/tags/ES6/"/>
    
      <category term="ES5 vs ES6" scheme="https://hodory.dev/tags/ES5-vs-ES6/"/>
    
  </entry>
  
  <entry>
    <title>［Node.js］Express.js로 NodeJS 시작하기</title>
    <link href="https://hodory.dev/2018/03/11/start-nodejs/"/>
    <id>https://hodory.dev/2018/03/11/start-nodejs/</id>
    <published>2018-03-11T12:57:18.000Z</published>
    <updated>2019-04-26T13:15:15.622Z</updated>
    
    <content type="html"><![CDATA[<h4 id="express-제너레이터-설치"><a href="#express-제너레이터-설치" class="headerlink" title="express 제너레이터 설치"></a>express 제너레이터 설치</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator</span><br></pre></td></tr></table></figure><h4 id="ejs-템플릿을-이용하여-myapp-디렉토리에-생성"><a href="#ejs-템플릿을-이용하여-myapp-디렉토리에-생성" class="headerlink" title="ejs 템플릿을 이용하여 myapp 디렉토리에 생성"></a>ejs 템플릿을 이용하여 myapp 디렉토리에 생성</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express myapp --view=ejs</span><br></pre></td></tr></table></figure><h4 id="myapp-디렉토리로-이동하여-npm-install-패키지-설치"><a href="#myapp-디렉토리로-이동하여-npm-install-패키지-설치" class="headerlink" title="myapp 디렉토리로 이동하여 npm install(패키지 설치)"></a>myapp 디렉토리로 이동하여 npm install(패키지 설치)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd myapp &amp; npm install</span><br></pre></td></tr></table></figure><h4 id="서버-실행"><a href="#서버-실행" class="headerlink" title="서버 실행"></a>서버 실행</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><h1 id="POST전송시-필요한-body-parser와-express-session-설치"><a href="#POST전송시-필요한-body-parser와-express-session-설치" class="headerlink" title="POST전송시 필요한 body-parser와 express-session 설치"></a>POST전송시 필요한 body-parser와 express-session 설치</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install body-parser express-session</span><br></pre></td></tr></table></figure><p>기존에는 NodeJS에서 POST 요청 데이터를 추출 할 수 있도록 하기 위하여 bodyParser를 설치해야 했는데 express-generator에 추가 되었다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;express-제너레이터-설치&quot;&gt;&lt;a href=&quot;#express-제너레이터-설치&quot; class=&quot;headerlink&quot; title=&quot;express 제너레이터 설치&quot;&gt;&lt;/a&gt;express 제너레이터 설치&lt;/h4&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Javascript" scheme="https://hodory.dev/categories/Javascript/"/>
    
      <category term="NodeJS" scheme="https://hodory.dev/categories/Javascript/NodeJS/"/>
    
    
      <category term="Javascript" scheme="https://hodory.dev/tags/Javascript/"/>
    
      <category term="NodeJS" scheme="https://hodory.dev/tags/NodeJS/"/>
    
      <category term="Node" scheme="https://hodory.dev/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ 에러 보여주기</title>
    <link href="https://hodory.dev/2017/11/17/php-view-error/"/>
    <id>https://hodory.dev/2017/11/17/php-view-error/</id>
    <published>2017-11-17T06:12:22.000Z</published>
    <updated>2019-05-12T07:11:32.045Z</updated>
    
    <content type="html"><![CDATA[<h5 id="배포-서버에서는-권장하지-않는-설정입니다"><a href="#배포-서버에서는-권장하지-않는-설정입니다" class="headerlink" title="배포 서버에서는 권장하지 않는 설정입니다."></a>배포 서버에서는 권장하지 않는 설정입니다.</h5><h5 id="테스트-서버에서-에러-메세지를-확인하고-싶을때"><a href="#테스트-서버에서-에러-메세지를-확인하고-싶을때" class="headerlink" title="테스트 서버에서 에러 메세지를 확인하고 싶을때"></a>테스트 서버에서 에러 메세지를 확인하고 싶을때</h5><h5 id="해당-php-파일의-최상위나-공통파일의-최상위에-이-소스코드를-넣어주시면-됩니다"><a href="#해당-php-파일의-최상위나-공통파일의-최상위에-이-소스코드를-넣어주시면-됩니다" class="headerlink" title="해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다."></a>해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다.</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(E_ALL); <span class="comment">//모든 PHP 에러를 리포팅함</span></span><br><span class="line">    ini_set(<span class="string">"display_errors"</span>, <span class="number">1</span>); <span class="comment">//php.ini 파일의 'display_errors'를 활성화 시킴</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;배포-서버에서는-권장하지-않는-설정입니다&quot;&gt;&lt;a href=&quot;#배포-서버에서는-권장하지-않는-설정입니다&quot; class=&quot;headerlink&quot; title=&quot;배포 서버에서는 권장하지 않는 설정입니다.&quot;&gt;&lt;/a&gt;배포 서버에서는 권장하지 않는 설정
      
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
      <category term="ERROR" scheme="https://hodory.dev/tags/ERROR/"/>
    
      <category term="INI_SET" scheme="https://hodory.dev/tags/INI-SET/"/>
    
  </entry>
  
  <entry>
    <title>［Docker］명령어 정리</title>
    <link href="https://hodory.dev/2017/09/01/docker-command/"/>
    <id>https://hodory.dev/2017/09/01/docker-command/</id>
    <published>2017-09-01T07:31:39.000Z</published>
    <updated>2018-03-16T01:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>이미지 다운로드</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull [다운로드 할 이미지명]: latest</span><br></pre></td></tr></table></figure><p><code>이미지를 컨테이너로 만들때</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t --name [컨테이너명] -d [이미지명]</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>컨테이너상태 확인 (&quot;a&quot;옵션은 정지된 컨테이너도 보여줌)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps [-a]</span><br></pre></td></tr></table></figure><p><code>컨테이너를 실행</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start [컨테이너명]</span><br></pre></td></tr></table></figure><p><code>컨테이너에 별칭을 주기</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name &lt;별칭&gt; &lt;이미지명&gt;</span><br><span class="line">ex) $ docker run -it --name nginx richarvey/nginx-php-fpm</span><br></pre></td></tr></table></figure><p><code>컨테이너 특정 포트 연결</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p &lt;로컬 포트 번호&gt;:&lt;컨테이너 포트 번호&gt; &lt;이미지명&gt;</span><br><span class="line">ex) $ docker run -p 8000:80 richarvey/nginx-php-fpm</span><br></pre></td></tr></table></figure></p><p><code>컨테이너 정지</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop [컨테이너명]</span><br></pre></td></tr></table></figure><p><code>bash shell로 명령실행가능하게함</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it &lt;컨테이너 이름&gt; /bin/bash</span><br></pre></td></tr></table></figure><p><code>컨테이너 삭제</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm &lt;컨테이너이름&gt;</span><br></pre></td></tr></table></figure><p><code>태그를 입력하지않으면 모든태그가 삭제됨</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi &lt;이미지 이름&gt;:&lt;태그&gt;</span><br></pre></td></tr></table></figure><p><code>윈도우 드라이브 공유</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &lt;윈도우 경로&gt;:&lt;컨테이너 경로&gt; -it &lt;컨테이너명&gt;</span><br><span class="line">ex) $ docker run -v /c/User/Administrator/PHP:/home/hodory -it nginx</span><br></pre></td></tr></table></figure><p><code>아래와 같이 여러가지 조합도 가능하다</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name &lt;별칭&gt; -d -p &lt;로컬포트&gt;:&lt;컨테이너포트&gt; -v &lt;로컬경로&gt;:&lt;컨테이너경로&gt; &lt;이미지명&gt;</span><br><span class="line">ex) $ docker run -it --name nginx -d -p 8000:80 -v /c/User/Administrator/PHP:/home/hodory richarvey/nginx-php-fpm</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;이미지 다운로드&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull [다운로드 할 이미지명]: latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;이미지를 컨테이너로 만들때&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -i -t --name [컨테이너명] -d [이미지명]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ETC" scheme="https://hodory.dev/categories/ETC/"/>
    
      <category term="Docker" scheme="https://hodory.dev/categories/ETC/Docker/"/>
    
    
      <category term="Docker" scheme="https://hodory.dev/tags/Docker/"/>
    
      <category term="도커" scheme="https://hodory.dev/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］삼항 연산자</title>
    <link href="https://hodory.dev/2017/09/01/conditional-ternary-operator/"/>
    <id>https://hodory.dev/2017/09/01/conditional-ternary-operator/</id>
    <published>2017-09-01T01:09:11.000Z</published>
    <updated>2019-05-12T07:11:32.050Z</updated>
    
    <content type="html"><![CDATA[<p>삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것)</p><p>a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환</p><p><code>ex)</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'foo'</span>;</span><br><span class="line">$b = $a ?: <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">echo</span> $b;    <span class="comment">// foo</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것)&lt;/p&gt;
&lt;p&gt;a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>［Hexo］ 명령어 정리</title>
    <link href="https://hodory.dev/2017/08/31/how-to-use-hexo/"/>
    <id>https://hodory.dev/2017/08/31/how-to-use-hexo/</id>
    <published>2017-08-31T13:57:17.000Z</published>
    <updated>2019-04-20T16:01:22.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-명령어-정리"><a href="#Hexo-명령어-정리" class="headerlink" title="Hexo 명령어 정리"></a>Hexo 명령어 정리</h1><hr><h1 id="초안-생성"><a href="#초안-생성" class="headerlink" title="# 초안 생성"></a># <code>초안 생성</code></h1><p><code>명령어</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft [파일명]</span><br></pre></td></tr></table></figure></p><p><code>예제</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft hello-world</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="초안을-포스트로-옮기기-Draft-to-Post"><a href="#초안을-포스트로-옮기기-Draft-to-Post" class="headerlink" title="# 초안을 포스트로 옮기기(Draft to Post)"></a># <code>초안을 포스트로 옮기기(Draft to Post)</code></h1><p><code>명령어</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [파일명]</span><br></pre></td></tr></table></figure></p><p><code>예제</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish hello-world</span><br></pre></td></tr></table></figure></p><h1 id="포스트-생성"><a href="#포스트-생성" class="headerlink" title="# 포스트 생성"></a># <code>포스트 생성</code></h1><p><code>명령어</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [파일명]</span><br></pre></td></tr></table></figure></p><p><code>예제</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new hello-world</span><br></pre></td></tr></table></figure></p><h1 id="배포하기"><a href="#배포하기" class="headerlink" title="# 배포하기"></a># <code>배포하기</code></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean // clean을 하지 않으면 deploy를 해도 페이지가 업데이트 되지 않는 경우가 발생한다</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure><h1 id="기타사항"><a href="#기타사항" class="headerlink" title="# 기타사항"></a># <code>기타사항</code></h1><blockquote><h2 id="카테고리와-태그와-같은-설정은-어떻게-설정하나요"><a href="#카테고리와-태그와-같은-설정은-어떻게-설정하나요" class="headerlink" title="카테고리와 태그와 같은 설정은 어떻게 설정하나요 ?"></a>카테고리와 태그와 같은 설정은 어떻게 설정하나요 ?</h2></blockquote><p>포스트파일의 Front-matter에 아래와 같이 작성하시면 됩니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: PHP 0001과 같이 번호 지정 하기</span><br><span class="line">tags: </span><br><span class="line">    - Hexo</span><br><span class="line">    - HelloWorld</span><br><span class="line">categories:</span><br><span class="line">    - Hexo</span><br><span class="line">date: 2017-08-31 12:00:00</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><blockquote><h2 id="썸네일을-등록하고-싶어요"><a href="#썸네일을-등록하고-싶어요" class="headerlink" title="썸네일을 등록하고 싶어요"></a>썸네일을 등록하고 싶어요</h2></blockquote><p>위의 포스트 Front-matter에 아래 사항을 추가하시면됩니다</p><p>아래에서 지정한 images 폴더의 위치는 source 폴더의 하위경로 입니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thumbnail: /images/logo.jpg</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-명령어-정리&quot;&gt;&lt;a href=&quot;#Hexo-명령어-정리&quot; class=&quot;headerlink&quot; title=&quot;Hexo 명령어 정리&quot;&gt;&lt;/a&gt;Hexo 명령어 정리&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;초안-생성&quot;&gt;&lt;a href=&quot;#초안-생성&quot; class=&quot;headerlink&quot; title=&quot;# 초안 생성&quot;&gt;&lt;/a&gt;# &lt;code&gt;초안 생성&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;명령어&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new draft [파일명]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;예제&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new draft hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://hodory.dev/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://hodory.dev/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ 0001과 같이 번호 지정 하기</title>
    <link href="https://hodory.dev/2017/08/31/php-str-pad/"/>
    <id>https://hodory.dev/2017/08/31/php-str-pad/</id>
    <published>2017-08-31T12:51:38.000Z</published>
    <updated>2019-05-12T07:11:32.068Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PHP에서-0001과-같이-번호-지정하기"><a href="#PHP에서-0001과-같이-번호-지정하기" class="headerlink" title="PHP에서 0001과 같이 번호 지정하기"></a>PHP에서 0001과 같이 번호 지정하기</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$count = <span class="number">1</span>;</span><br><span class="line">$count = str_pad($count,<span class="number">4</span>,<span class="string">'0'</span>,STR_PAD_LEFT); <span class="comment">//0001</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>01이나 001 같이 사용할 때는 두번째 파라미터 값에 2(01) 또는 3(001)을 사용하면 된다.</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;PHP에서-0001과-같이-번호-지정하기&quot;&gt;&lt;a href=&quot;#PHP에서-0001과-같이-번호-지정하기&quot; class=&quot;headerlink&quot; title=&quot;PHP에서 0001과 같이 번호 지정하기&quot;&gt;&lt;/a&gt;PHP에서 0001과 같이 번호 지정
      
    
    </summary>
    
      <category term="PHP" scheme="https://hodory.dev/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://hodory.dev/tags/PHP/"/>
    
      <category term="str_pad" scheme="https://hodory.dev/tags/str-pad/"/>
    
      <category term="function" scheme="https://hodory.dev/tags/function/"/>
    
  </entry>
  
</feed>
