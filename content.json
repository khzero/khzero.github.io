{"meta":{"title":"Web Developer Hodory","subtitle":"Hodory's Dev Blog","description":"Web Developer Hodory's Dev Blog","author":"khzero","url":"https://hodory.dev"},"pages":[{"title":"","date":"2018-11-04T15:33:54.490Z","updated":"2018-02-02T07:29:19.000Z","comments":true,"path":"OneSignalSDKUpdaterWorker.js","permalink":"https://hodory.dev/OneSignalSDKUpdaterWorker.js","excerpt":"","text":"importScripts('https://cdn.onesignal.com/sdks/OneSignalSDK.js');"},{"title":"","date":"2018-11-04T14:58:47.472Z","updated":"2018-02-02T07:29:24.000Z","comments":true,"path":"OneSignalSDKWorker.js","permalink":"https://hodory.dev/OneSignalSDKWorker.js","excerpt":"","text":"importScripts('https://cdn.onesignal.com/sdks/OneSignalSDK.js');"},{"title":"","date":"2018-11-04T05:46:38.168Z","updated":"2018-02-02T07:29:22.000Z","comments":true,"path":"manifest.json","permalink":"https://hodory.dev/manifest.json","excerpt":"","text":"{\"gcm_sender_id\":\"482941778795\",\"gcm_sender_id_comment\":\"Do not change the GCM Sender ID\"}"},{"title":"","date":"2018-11-04T14:48:11.823Z","updated":"2018-04-20T03:08:57.000Z","comments":true,"path":"about/index.html","permalink":"https://hodory.dev/about/index.html","excerpt":"","text":""}],"posts":[{"title":"［Hexo］TravisCI로 블로그 자동 배포시 겪은 문제","slug":"hexo-travis-ci-with-no-contents","date":"2019-06-06T03:22:59.000Z","updated":"2019-06-08T14:57:32.621Z","comments":true,"path":"2019/06/06/hexo-travis-ci-with-no-contents/","link":"","permalink":"https://hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/","excerpt":"WARN No layout 자동 배포를 했더니 빈 파일들만 올라가요!! 한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다. 아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다… 블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다 기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.123$ hexo clean$ hexo generate$ hexo deploy 쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 package.json 파일을 이용하여,12345678/* * package.json */&#123; &quot;scripts&quot;: &#123; &quot;deploy&quot;: &quot;hexo clean &amp;&amp; hexo d -g&quot; &#125;&#125; 해당 스크립트를 작성해서 npm deploy명령어로 배포를 하고, 소스는 별도의 레포지토리에 관리하고 있었습니다.","text":"WARN No layout 자동 배포를 했더니 빈 파일들만 올라가요!! 한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다. 아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다… 블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다 기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.123$ hexo clean$ hexo generate$ hexo deploy 쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 package.json 파일을 이용하여,12345678/* * package.json */&#123; &quot;scripts&quot;: &#123; &quot;deploy&quot;: &quot;hexo clean &amp;&amp; hexo d -g&quot; &#125;&#125; 해당 스크립트를 작성해서 npm deploy명령어로 배포를 하고, 소스는 별도의 레포지토리에 관리하고 있었습니다. 팀원에게는 자동 배포를 추천하였으나(https://jheloper.github.io/2019/04/hexo-ci-cd-with-codeship/),저는 설정하지 않고 있었죠… 그러던 중 Gracefullight님의 추천을 받아,이전에 보았던 ChangJoo Park님의 포스팅인 Travis CI를 이용한 Github Pages + Hexo 블로그 자동 배포하기를 참고하여작업하기로 결심했습니다. Github Access Token 발급 받기 _config.yml 파일에 deploy.repo 수정하기 배포 스크립트인 .travis.yml 작성하기 깃허브 플러그인을 이용하여 레포지토리와 연결하기 Travis CI 서비스에서 해당 프로젝트에 Environment Variables에 __GITHUB_TOKEN__ 이름의 환경변수에 액세스 토큰 추가하기 위의 다섯가지를 모두 마친 뒤,드디어 소스코드를 관리하는 Github Repository에 푸시를 하였습니다! 빌드도 성공했고, 푸시도 성공적이였습니다.확인하고자 블로그에 접속을 하였는데, 빈화면이 노출되고 있었습니다. 정적페이지이니까 우선적으로 Github Page Repo의 파일들을 확인했는데,모든 경로의 index.html 파일들이 0바이트로 변경되어 있었습니다. .gitignore 때문에 컨텐츠가 만들어지지 않는 것인가? 먼저 의심을 했고 hexo-generator가 만들어주는 db.json도 git으로 버전관리대상에 추가 후 다시 푸시하였습니다.예상대로 hexo generate 스크립트를 실행할때 생성 되기 때문에, 동일한 현상이 재현 되었습니다. 스크립트 실행시 무슨 문제가 있었다면 빌드가 중지 되었을텐데, Job log를 보았을때는 그런 문제가 없었습니다. 그리하여 기존 방식대로 우선 배포를 해둔 후, Job Log를 하나씩 자세히 들여다 보았는데 1234WARN No layout: 2019/06/05/where-is-constructor-inject/index.htmlWARN No layout: 2019/06/04/json-property-not-working/index.htmlWARN No layout: 2019/05/28/required-a-bean-of-type-that-could-not-be-found/index.html... 위와 같이 No layout 이라는 경고 메세지가 있었습니다.혹시나 하여 새로운 폴더에서 소스코드를 풀 받아 보았더니,themes 폴더에 사용중이던 테마가 빈 폴더였습니다. 항상 로컬에서만 푸시 하였기 때문에, 그걸 모르고 있었죠… 깃허브 레포지토리에는 이와같이 표시되고 클릭 불가능한 상태였습니다. 원인을 찾아본 결과, 해당 theme 마다 .git 디렉토리가 존재하고,개별적으로 버전관리가 되고 있기 때문에 저의 레포지토리를 pull을 받아도 사용할 수 없었습니다. 해당 포스팅을 보고,서브모듈을 사용해야겠다 생각했습니다. 하지만 템플릿쪽이다보니 개별적인 수정사항들도 생길 수 있기 때문에 직접 관리하는게 좋겠다 싶어서,아예 .git 폴더를 지우고, 제 레포지토리에서 버전관리 할 수 있게 하는 쪽으로 마음을 바꾸었습니다. 그런데 themes/icarus/.git 폴더를 삭제하고, git status 명령을 쳤을때,themes/icarus 디렉토리 하위 파일들이 Untracked files에 없었습니다.혹시나해서 폴더명을 바꾸니까 노출이 되었고요.. git에 캐시가 남아 있나? 싶어 git rm --cached themes/icarus 명령어를 사용하였더니정상적으로 Untracked files에 노출이 되어 버전관리에 추가한 후, 푸시를 했습니다. 그 후, 현재와 같이 정상적으로 동작하고 있습니다!! 정말 중요한 핵심은 theme 폴더를 레포지토리에 추가하시면됩니다. 였기 때문에한줄 요약으로 맨 위에 기재해두었습니다.","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hodory.dev/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hodory.dev/tags/Hexo/"}]},{"title":"［Java］해당 클래스의 서비스는 어디서 주입되나요??","slug":"where-is-constructor-inject","date":"2019-06-05T02:40:37.000Z","updated":"2019-06-08T14:56:49.530Z","comments":true,"path":"2019/06/05/where-is-constructor-inject/","link":"","permalink":"https://hodory.dev/2019/06/05/where-is-constructor-inject/","excerpt":"회사 업무중 스프링 서비스 코드 푸시를 하였습니다. 다른 팀원들에게 인터페이스를 파라미터로 정의한것은 확인하였는데,혹시 해당 컨트롤러에 주입은 어디에서 되나요?` 라는 질문을 들었습니다. 123456@RestController@Slf4j@RequiredArgsConstructorpublic class YourController &#123; private final YourService yourService;&#125; 위와같이 컨트롤러가 선언되어있었습니다.(물론 예제입니다.)","text":"회사 업무중 스프링 서비스 코드 푸시를 하였습니다. 다른 팀원들에게 인터페이스를 파라미터로 정의한것은 확인하였는데,혹시 해당 컨트롤러에 주입은 어디에서 되나요?` 라는 질문을 들었습니다. 123456@RestController@Slf4j@RequiredArgsConstructorpublic class YourController &#123; private final YourService yourService;&#125; 위와같이 컨트롤러가 선언되어있었습니다.(물론 예제입니다.) 해당 클래스의 yourService에 YourServiceImpl(인터페이스 구현체)는 어떻게 주입이 되는걸까요? 아직도 스프링의 Application Context에 의한 DI(의존성 주입)가 저는 이해하기 어려운것 같습니다. 인터페이스의 구현체가 Service 어노테이션을 사용해서 Application Context에 의해 관리되는 Bean으로 등록되면, 해당 인터페이스에 자동으로 주입이됩니다(이 부분은 정말 신기하다고 생각합니다.제가 PHP 개발자이고, Laravel 프레임워크의 간결함과 모던함을 좋아하는데,이렇게까지 사용해본적이 없어,해당 프레임워크 뿐 아니라, 다른 언어나 프레임워크에서도 이와같이 주입이 되는지 확답을 쓸 수 없습니다.) 일반적으로 해당 클래스에 구현체를 주입하기 위해서는 1234567891011121314151617181920212223242526272829303132333435363738/* * controller/YourController.java */@RestController@Slf4jpublic class YourController &#123; private final YourService yourService; YouController(YourServiceImpl yourService) &#123; this.yourService = yourService; &#125;&#125;---/* * service/YourService.java */public interface YourService &#123; void whatYouCall();&#125;---/* * service/impl/YourServiceImpl.java */@Servicepublic class YourServiceImpl implements YourService &#123; @Override public void whatYouCall() &#123; ... &#125;&#125; 위와 같이 구현했을것입니다. 클래스에 YourService라는 Interface를 프로퍼티로 선언한 후,해당 클래스에 YourSericeImpl을 주입하여 주는것이죠. 일반적으로 제가 생각하는 방식 또한 위와 같으나,Spring Framework는 해당 클래스에 Spring Bean을 주입해줍니다.(????) @Service 어노테이션을 이용하여 YourServiceImpl 클래스는 YourService의 구현체로 스프링어플리케이션의 빈에 등록이 됩니다.더불어, 스프링의 DI에 의해 YourService에 주입될 때는 해당 인터페이스의 구현체가 주입이 되게 되죠….. 같은 인터페이스의 구현체가 여러개일 경우는 어떻게 해야할까요? 1231. 위의 코드와 같이 구현 클래스를 주입 받는 걸로 바꾼다.2. `@Qualifier` 어노테이션을 이용한다.3. 스프링 빈의 네임 기반으로 해야한다. 제가 아는 방안은 위와 같은 세가지 방안입니다.(해당 부분을 가르쳐주신 @jhkim님 감사합니다) 위와 같은 개념을 이해하였다면 Lombok을 사용하여 해당 부분을 더 간소화 시킬 수 있습니다. @RequiredArgsConstructor은 어떻게 동작할까요? 해당 어노테이션 인터페이스의 주석을 보면 이와 같습니다. 12Generates a constructor with required arguments.Required arguments are final fields and fields with constraints such as &#123;@code @NonNull&#125;. 위의 주석에 따르면 final로 선언된 필드를 매개변수로 갖는 생성자를 자동 생성하여줍니다. 이전의 실수 - AllArgsConstructor의 잘못된 사용를 통해 배울 수 있던 부분입니다. @RequiredArgsConstructor 어노테이션과 함께 private final YourService yourService; 이와 같이 선언 할 경우,해당 코드는 컴파일시 아래와 같이 변환됩니다. 123456789@RestController@Slf4jpublic class YourController &#123; private final YourService yourService; YouController(YourService yourService) &#123; this.yourService = yourService; &#125; &#125; 위에서 본 코드와 유사해지는데요 이와 같이 Lombok 어노테이션은 생성자를 직접 만들어주기때문에 간결한 코드를 유지할 수 있습니다. 허나 위의 코드와 다른점은 YourService를 생성자의 파라미터 타입으로 주느냐, YourServiceImpl을 생성자 파라미터 타입으로 주느냐의 차이인데 위에 언급한바와 같이, 스프링 DI는 스프링 빈에 등록된 클래스를 주입합니다. 고로, YourService 타입이지만, YourServiceImpl 클래스가 해당 인터페이스를 구현한 구현체이며, 스프링빈으로 등록되어 있기 때문에,해당 클래스가 주입이됩니다. 포스팅의 잘못된 부분이 있다면 코멘트 또는 메일로 보내주시면부족한 부분은 보완하고, 틀린 부분은 수정하겠습니다아직 프로그래밍에 서툴어서 제가 이해한 개념과 다를 수 있는데, 많은 도움 부탁드리겠습니다. 끝으로 긴 글을 읽어주셔서 감사합니다.","categories":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://hodory.dev/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://hodory.dev/tags/SpringBoot/"}]},{"title":"［Java］@JsonProperty이 왜 동작을 안하지?","slug":"json-property-not-working","date":"2019-06-04T14:13:03.000Z","updated":"2019-06-04T14:13:03.117Z","comments":true,"path":"2019/06/04/json-property-not-working/","link":"","permalink":"https://hodory.dev/2019/06/04/json-property-not-working/","excerpt":"123class anonymousDTO &#123; String whatYouWant;&#125; 대부분 자바의 변수를 생성할때 위와 같이 CamelCase를 많이 쓰는것으로 알고있습니다…..(본인이 잘못 생각하는것일 수 있습니다.) 필자 또한 위와 같이 camelCase를 사용하였으나 API 통신 및 응답을 리턴할때에는hyphen uppercase가 필요했습니다.","text":"123class anonymousDTO &#123; String whatYouWant;&#125; 대부분 자바의 변수를 생성할때 위와 같이 CamelCase를 많이 쓰는것으로 알고있습니다…..(본인이 잘못 생각하는것일 수 있습니다.) 필자 또한 위와 같이 camelCase를 사용하였으나 API 통신 및 응답을 리턴할때에는hyphen uppercase가 필요했습니다. 위의 조건을 충족하기 위해 적절한 어노테이션을 찾았는데,@JsonProperty(&quot;{WHAT_YOU_WANT}&quot;)였습니다. json으로 매핑할때 WHAT_YOU_WANT에 들어갈 값으로 해당 프로퍼티를 매핑하는것이였습니다. 테스트 코드를 작성하여 확인해보았지만 정상 동작하지 않아, 주위의 도움을 받았는데,getter메소드에 해당 어노테이션을 작성해야한다는 조언도 있었으며,compile group: &#39;com.fasterxml.jackson.core&#39;, name: &#39;jackson-databind&#39;해당 라이브러리를 gradle에 추가하여 jackson 라이브러리를 최신화 할 필요가 있다는 조언을 받았습니다. 123456@Getter@Setterclass anonymousDTO &#123; @JsonProperty(\"WHAT-YOU-WANT\") String whatYouWant;&#125; 12345678class anonymousDTO &#123; String whatYouWant; @JsonProperty(\"WHAT-YOU-WANT\") public String getWhatYouWant() &#123; return this.whatYouWant; &#125;&#125; 많은 주위의 도움을 받아 위와 같이 두가지 방법을적용해 보았으나, 기대하는 결과를 얻을 수 없었습니다.(에러나 Exception은 발생하지 않았으나, 요청에 대한 응답을 모델에 매핑하였으나, Null 값이 해당 프로퍼티에 매핑되었습니다.) 오랜 삽질 끝에 얻은 결과는제가 요청에 대한 json Object 응답을 Gson을 이용하여 해당타입으로 받았는데,jackson의 json object로 매핑하였고, jackson의 어노테이션인 @JsonProperty가 기대와 다르게 동작하여,검색하였는데 @SerializedName 어노테이션으로 해결할 수 있다는 StackOverFlow에서의 답변이였습니다. 그리하여 해당 코드를 이와같이 변경하였습니다. 123456@Getter@Setterclass anonymousDTO &#123; @SerializedName(\"WHAT-YOU-WANT\") String whatYouWant;&#125; Gson을 이용할 때에는 @SerializedName을 사용해야하고 jackson을 사용할때에는 @JsonProperty를 사용해야 한다는데레거시 PHP와 JS를 좋아하는 저로써는 똑같은 json object 이고, 사실상 JsonObject라는 타입인데,Gson의 json 이냐 jackson의 json이냐에 따라 다른 어노테이션을 써야한다는게 이해하기 어려웠습니다. 지난번, 어노테이션을 사용할때에도 해당 어노테이션이 어떻게 동작하는지 유의를 하며 써야겠다고 다짐했으나,결국 빠른 결과물과 편리함을 추구하다보니, 많이 사용하는 어노테이션을 그저 가져다 쓰는데에만 중점을 두었습니다. 제가 여태까지 사용해온 레거시 php 나 js는 이와 같은 강타입 언어가 아니다보니, 해당 어노테이션도 없을 뿐만 아니라,그저 모델 클래스를 만들 필요없이 변수에 담을 수 있었는데,이러한 부분이 어렵기도 하고, 긍정적인 시각으로 바라보았을때는 어느정도 타입체킹이 되고, 개발자 입장에선 복잡도는 증가하지만,조금 더 안정적이지 않을까 싶기도 합니다. 물론 제가 다른 대안으로 생각하는 TypeScript와 PHP v7.x도 있지만요…","categories":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://hodory.dev/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://hodory.dev/tags/SpringBoot/"}]},{"title":"［Java］@AllArgsConstructor의 잘못된 사용","slug":"required-a-bean-of-type-that-could-not-be-found","date":"2019-05-28T14:29:30.000Z","updated":"2019-06-08T14:59:03.472Z","comments":true,"path":"2019/05/28/required-a-bean-of-type-that-could-not-be-found/","link":"","permalink":"https://hodory.dev/2019/05/28/required-a-bean-of-type-that-could-not-be-found/","excerpt":"Consider defining a bean of type java.lang.String in your configuration.스프링부트로 서비스를 개발중에 @Value 어노테이션을 이용하여 application.yml 파일에 저장해둔 환경변수에 접근하고 싶었는데,아래와 같은 오류가 발생하였습니다.123Parameter 2 of constructor in com.hodory.v1.service.MyService required a bean of type 'java.lang.String' that could not be found.Consider defining a bean of type 'java.lang.String' in your configuration.","text":"Consider defining a bean of type java.lang.String in your configuration.스프링부트로 서비스를 개발중에 @Value 어노테이션을 이용하여 application.yml 파일에 저장해둔 환경변수에 접근하고 싶었는데,아래와 같은 오류가 발생하였습니다.123Parameter 2 of constructor in com.hodory.v1.service.MyService required a bean of type 'java.lang.String' that could not be found.Consider defining a bean of type 'java.lang.String' in your configuration. Retrofit을 사용하기위해 apiBaseUrl을 가져오려 작성한 코드는 아래와 같습니다. 123456789101112@Slf4j@Service@AllArgsConstructorpublic class MyService &#123; private final MyRepository myRepository; private final ModelMapper modelMapper; @Value(\"$&#123;config.endpoint.url&#125;\") private String serviceUrl; ...&#125; 필드에 @Autowired를 사용하는것은 권장하지 않는다는 IDE에서 나오는 메세지때문에 이 방식은 사용하지 않았습니다. 생성자를 이용한 주입이 아닌 @AllArgsConstructor 어노테이션을 사용한 이유는이전에 사용하였을때, 생성자를 이용해 직접 주입하는 방식보다, 의존성 주입 할 대상이 많아졌을때 훨씬 더 깔끔하였던 경험이 있어,해당 어노테이션을 사용하였습니다. private String serviceUrl 을 추가하고나서부터 해당 오류가 나타났습니다. 한참을 고민하다가 팀원들의 도움을 받아 원인을 알게 되었는데, serviceUrl이라는 값은 String 타입의 변수일 뿐, 스프링에서 관리하는 Bean이 아니기 때문에 의존성 자동 주입이 될 수 없다는것이였습니다. @Value를 사용하면 자동 주입이 되는줄 알았는데, 제가 생각했던것과 달랐습니다. 아래와 같이 스프링 애플리케이션에 의해 자동 주입 가능한 필드들을 파라미터로 가진 생성자를 만들어 필드에 매핑하도록 수정 하였더니,오류 없이 serviceUrl에 application.yml파일에 있던 url도 설정 되어 있었습니다. 1234567891011121314151617@Slf4j@Servicepublic class MyService &#123; private final MyRepository myRepository; private final ModelMapper modelMapper; @Value(\"$&#123;config.endpoint.url&#125;\") private String serviceUrl; @Autowired public MyService(MyRepository repository, ModelMapper modelMapper) &#123; this.myRepository = repository; this.modelMapper = modelMapper; &#125; ...&#125; 위와 같이 생성자에 직접 필요한 Bean들을 명시하여 주입 하는 방식 말고도기존 코드에서 @AllArgsConstructor 대신 @RequiredArgsConstructor 어노테이션을 사용하기만 하면,final로 선언된 필드나 @NonNull 어노테이션을 사용한 필드만을 필요로 하는 생성자를 만들어주기 때문에,이 경우에는 원하는 결과를 얻을 수 있었습니다. 자바에도 익숙 하지 않고, 의존성 주입이라는 개념에 대해 익숙하지 않은데,원리를 파악하지 않고, 남들을 따라하는 기존의 자세에 반성하는 계기가 되었으며, 어노테이션을 사용 할 때 해당 어노테이션이 해주는 기능만 파악 하는 것 만큼어떻게 동작하는지(예를 들어 lombok의 경우 어떤 코드를 생성 해주는지)등을 유의하며 사용해야겠다고 느꼈습니다.","categories":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://hodory.dev/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://hodory.dev/tags/SpringBoot/"},{"name":"Lombok","slug":"Lombok","permalink":"https://hodory.dev/tags/Lombok/"},{"name":"Annotation","slug":"Annotation","permalink":"https://hodory.dev/tags/Annotation/"}]},{"title":"［Java］스프링부트 회원 기존 비밀번호 체크하기","slug":"spring-boot-validate-user-old-password","date":"2019-05-14T06:42:32.000Z","updated":"2019-05-14T06:42:32.000Z","comments":true,"path":"2019/05/14/spring-boot-validate-user-old-password/","link":"","permalink":"https://hodory.dev/2019/05/14/spring-boot-validate-user-old-password/","excerpt":"","text":"회원 비밀번호 변경 로직을 작성중에 현재 비밀번호와 새 비밀번호를 입력받아,기존 비밀번호가 맞는지 체크하는 로직을 넣고 싶었습니다. 12345678910String currentPassword = new BCryptPasswordEncoder().encode(request.getCurrentPassword()); final User persistUser = userRepository.findUserByIdAndPassword(userId, currentPassword) .orElseThrow(() -&gt; new EntityNotFoundException(\"회원정보를 찾을 수 없습니다.\")); if(!currentPassword.equals(persistUser.getPassword())) &#123; logger.info(\"changePassword is Not Equal Current Password\"); return new ResponseEntity&lt;&gt;(UserRegisterResult.ERROR.getResponseBody(), HttpStatus.FORBIDDEN); &#125; new BCryptPasswordEncoder().encode(password);로 암호화 한 패스워드를 저장했기 때문에,회원을 찾을때도 이렇게 하면 되겠다고 생각해서 위와 같은 코드를 작성하였는데,테스트중 계속하여 EntityNotFoundException이 발생하였습니다. 디버깅으로 체크하였더니 String currentPassword = new BCryptPasswordEncoder().encode(request.getCurrentPassword()); 부분에서 매번 다른 비밀번호가 currentPassword에 들어갔습니다. 왜 다른 값이 나오는지 알고 싶어 BCryptPasswordEncoder 클래스 파일을 열어보았는데, encode 부분에서 rawPassword 와 salt값을 생성하여 두개의 값으로 패스워드를 해싱하고 있었습니다. 해당 클래스 파일안에 matches(CharSequence rawPassword, String encodedPassword)라는 함수가 있었고, 클래스의 인터페이스를 확인하였더니, 1234567891011/** * Verify the encoded password obtained from storage matches the submitted raw * password after it too is encoded. Returns true if the passwords match, false if * they do not. The stored password itself is never decoded. * * @param rawPassword the raw password to encode and match * @param encodedPassword the encoded password from storage to compare with * @return true if the raw password, after encoding, matches the encoded password from * storage */boolean matches(CharSequence rawPassword, String encodedPassword); 라는 주석을 확인하였고, 구현체가 아닌 인터페이스를 사용하고자org.springframework.security.crypto.password.PasswordEncoder 를 의존성 주입하여, 12345678final User persistUser = userRepository.findById(userId) .orElseThrow(() -&gt; new EntityNotFoundException(\"회원정보를 찾을 수 없습니다.\"));if(!passwordEncoder .matches(request.getCurrentPassword(), persistUser.getPassword())) &#123; logger.info(\"changePassword is Not Equal Current Password\"); return new ResponseEntity&lt;&gt;(UserRegisterResult.ERROR.getResponseBody(), HttpStatus.FORBIDDEN);&#125; 이와 같이 수정하였고, 기대했던 결과대로 수행되었습니다. 아직 자바와 스프링이 많이 서툴러서 코드를 작성하는 시간보다 검색해보는 시간이 많아 더 어려운거 같습니다. 잘못된 부분이 있다면 코멘트 부탁드리겠습니다.","categories":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://hodory.dev/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hodory.dev/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://hodory.dev/tags/SpringBoot/"}]},{"title":"［JS］jQuery 없이 Selectbox에서 여러개 선택된 option의 값 추출하기","slug":"how-to-get-multiple-selected-options-with-vanillajs","date":"2019-05-12T05:29:38.000Z","updated":"2019-05-12T07:13:37.754Z","comments":true,"path":"2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/","link":"","permalink":"https://hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/","excerpt":"","text":"DOM을 다룰때 jQuery를 사용하면 매우 편리합니다. 물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다. 하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다. 저는 위와 같은 생각으로,주로 DOM 핸들링에는 jQuery 의존성을 줄이고자 순수 자바스크립트를 사용하려 노력하고 있습니다. 또한, document.querySelector와 document.querySelectorAll 를 이용한다면,jQuery에서 사용하던 복잡한 DOM Selector도 쉽게 사용할 수 있습니다. 123456&lt;select id=\"user\" name=\"user[]\" multiple=\"multiple\"&gt; &lt;option&gt;선택&lt;/option&gt; &lt;option value=\"foo\"&gt;Foo&lt;/option&gt; &lt;option value=\"bar\"&gt;Bar&lt;/option&gt; &lt;option value=\"baz\"&gt;Baz&lt;/option&gt;&lt;/select&gt; 위와 같은 Multiple SelectBox에서 여러개가 선택되었을 경우 값을 어떻게 가져올까요? jQuery를 사용하면 $(&quot;#user&quot;).val()으로 짧고 간결하게 가져올 수 있습니다. 선택된 값이 없을 경우 null이 리턴되고, 선택된 값이 있으면 배열 안에 value 값이 담깁니다. 그렇다면 순수 자바스크립트로는 어떻게 표현할까요? 123Array.from(document.querySelector(\"#user\").selectedOptions, (item)=&gt; &#123; return item.value;&#125;); document.querySelector(&quot;#user&quot;).selectedOptions를 사용하면 ID 값이 user인 DOM을 찾아 selected 된 옵션을 리턴하여줍니다.해당 값에서 value 값만 뽑고싶다면 위와 같이 처리할 수 있습니다. 위와 같이 처리하면 jQuery를 사용할때와 다른점은 선택된 옵션이 없을 경우에는 []를 리턴하여 줍니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://hodory.dev/tags/JS/"},{"name":"Webpack","slug":"Webpack","permalink":"https://hodory.dev/tags/Webpack/"}]},{"title":"［PHP］Monolog와 함께 로그를 시작하자 - 1","slug":"php-logging-with-monolog-1","date":"2019-05-09T15:27:05.000Z","updated":"2019-06-08T14:56:49.525Z","comments":true,"path":"2019/05/10/php-logging-with-monolog-1/","link":"","permalink":"https://hodory.dev/2019/05/10/php-logging-with-monolog-1/","excerpt":"PHP에서 로그 남기기PHP에서는 주로 JS에서 console.log | console.debug 와 유사하게 var_dump | print_r | echo | sys_log | error_log 등 다양한 방식으로 로그를 남기고 있습니다. Monolog란?PSR-3을 준수하고 있는 로깅 프레임워크로,거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다. RFC 5424(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다. DEBUG(100) INFO(200) NOTICE(250) WARNING(300) ERROR(400) CRITICAL(500) ALERT(550) EMERGENCY(600)","text":"PHP에서 로그 남기기PHP에서는 주로 JS에서 console.log | console.debug 와 유사하게 var_dump | print_r | echo | sys_log | error_log 등 다양한 방식으로 로그를 남기고 있습니다. Monolog란?PSR-3을 준수하고 있는 로깅 프레임워크로,거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다. RFC 5424(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다. DEBUG(100) INFO(200) NOTICE(250) WARNING(300) ERROR(400) CRITICAL(500) ALERT(550) EMERGENCY(600) 코어 컨셉간단하게 Logger Instance에 Record를 추가하면,해당 인스턴스에 추가 해두었던 핸들러에 이벤트를 전파하는 것으로 보입니다.(한개의 로그를 여러곳에 저장할 수 있는 이점을 가지고 있습니다.) 설치 방법PHP Composer로 관리할 수 있는 라이브러리이므로 Composer를 이용하여 설치합니다.1composer require monolog/monolog 사용방법우선적으로 use를 사용하여 사용할 Namespace를 추가합니다.1234&lt;?phpuse Monolog\\Logger;use Monolog\\Handler\\StreamHandler;use Monolog\\Handler\\FirePHPHandler; Logging Channel의 이름을 설정하여 객체를 생성합니다.12// Create the logger$logger = new Logger(&apos;Application&apos;); 로그를 전파할 핸들러를 추가합니다. php:stderr 또는 원격이나 로컬 파일 기타에 사용할 Stream Handler를 설정합니다. Slack Webhook Url으로 보내기 위해 Slack WebHook Handler를 설정합니다. 123// Now add some handlers$logger-&gt;pushHandler(new StreamHandler(__DIR__ . '/app.log', Logger::DEBUG));$logger-&gt;pushHandler(new SlackWebhookHandler(&#123;&#123;WEBHOOK_URL&#125;&#125;, &#123;&#123;CHANNEL&#125;&#125;, &#123;&#123;USERNAME&#125;&#125;, false, null, false, false, Logger::INFO)); 아래와 같은 함수를 호출하여 로그를 쌓을 수 있습니다.1234567// You can now use your logger$logger-&gt;info('Welcome To Monolog');/********* * app.log *********/// [2019-05-10 17:03:10] Application.INFO: Welcome To Monolog [] [] Legacy한 프로젝트에서는 주로 컨테이너 객체라는 개념이 없는 경우가 많은데,프로젝트 내부에서도 글로벌 변수에 담아서 Logger 객체를 사용해야하나 고민하였습니다.문서를 확인하다보니 이를 위한 Monolog\\Registry라는 유틸 클래스가 있었고,이와 같이 사용할 수 있습니다. 1234567891011121314151617181920212223242526272829303132/**************** * bootstrap.php ****************/ &lt;?phpuse Monolog\\Handler\\StreamHandler;use Monolog\\Logger;use Monolog\\Registry;$logger = new Logger('Application');$logger-&gt;pushHandler(new StreamHandler(__DIR__ . '/app.log', Logger::DEBUG));Registry::addLogger($logger,'ApplicationLog');/**************** * foo.php ****************/&lt;?phpuse Monolog\\Registry;require_once __DIR__ . \"/bootstrap.php\";function logInfo($message) &#123; $logger = Registry::getInstance('ApplicationLog'); $logger-&gt;info($message);&#125;logInfo('I am Global Logging');/********* * app.log *********/// [2019-05-10 17:03:10] Application.INFO: I am Global Logging [] [] 이와 같이 bootstrap.php 파일에서 Register에 등록한 Logger 객체는global 변수를 사용하지 않아도 클래스 / 함수 상관 없이 어디에서든지 사용 가능해집니다. 더 좋은 활용 방법이 있으시다면 공유 부탁드리겠습니다. 자세한 사항은 Monolog-Usage에서 확인 하실 수 있습니다.","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"},{"name":"LogSystem","slug":"LogSystem","permalink":"https://hodory.dev/tags/LogSystem/"},{"name":"Composer","slug":"Composer","permalink":"https://hodory.dev/tags/Composer/"},{"name":"Packagist","slug":"Packagist","permalink":"https://hodory.dev/tags/Packagist/"}]},{"title":"［Laravel］with() | has() | whereHas() 뭐가 다를까","slug":"eloquent-orm-with-has-where-has","date":"2019-04-26T15:15:24.000Z","updated":"2019-05-12T07:09:26.726Z","comments":true,"path":"2019/04/27/eloquent-orm-with-has-where-has/","link":"","permalink":"https://hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/","excerpt":"ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서, 쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다 검색으로 알아보던중 Eloquent:Relations에 대해 알게되었습니다. 라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기 예를들어 User가 여러개의 Post 를 가지고 있다면,User 클래스에 $this-&gt;hasMany(&#39;App\\Post&#39;);를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.","text":"ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서, 쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다 검색으로 알아보던중 Eloquent:Relations에 대해 알게되었습니다. 라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기 예를들어 User가 여러개의 Post 를 가지고 있다면,User 클래스에 $this-&gt;hasMany(&#39;App\\Post&#39;);를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다. with() user id name post id user_id title이와 같은 테이블 구조에서 유저가 작성한 글의 제목을 조회하려면1234$users = selectAll(\"select * from `user`);foreach ($users as $user) &#123; $user['post_title'] = selectOne(\"select `title` from `post` where `post`.`user_id` = &#123;$user['id']&#125;\");&#125; 회원을 조회하고, 회원들을 순회하며 게시물을 조회하는 코드입니다.이 경우 회원이 1000명일 경우 쿼리는 1001번 실행하게 됩니다.이것을 N+1쿼리 문제 라고 합니다. 사람들에 따라 직관적이여서 선호하기도 하고,join으로 실행시 쿼리가 오래 걸리면 이와 같이 분리하여 사용하기도 합니다.또는 join으로 해결할 수 없는 상황에서도 사용합니다. 이 문제를 해결 하기 위해 1$users = selectAll(\"select `user`.*,`post`.`title` as post_title from `user` left join `post` on `post`.`user_id` = `user`.`id`\"); join으로 해결할 수 없는 경우를 제외 하고는 위와 같이 join을 사용해서 조회 할 수 있습니다. 또한 이 문제는 ORM에서 주로 발생 합니다.ORM을 사용하면 user와 post의 관계를 설정하고, 아래와 같이 사용할 수 있습니다.123foreach (User::all() as $user) &#123; echo $user-&gt;post-&gt;title;&#125; 해당 코드는123456select * from `user`; # 1, 2, 3, 4, 5, 6....select * from `post` where id = 1;select * from `post` where id = 2;select * from `post` where id = 3;select * from `post` where id = 4;... user를 조회하고, user의 수 만큼 post를 조회합니다.위의 N+1 문제와 같은 문제입니다. 이 문제를 해결 하기 위한 방안으로는 즉시 로딩(Eager Loading)이 있습니다. 123foreach (User::with('posts')-&gt;get() as $user)&#123; echo $user-&gt;post-&gt;title;&#125; 이와같이 with()를 사용하면 미리 선언한 관계를 사용하여 같이 가져올수있습니다.언뜻 보기엔 별 다를바 없어 보이는 코드이지만 with 메소드를 사용하면, user와 연관된 post를 미리 로드합니다. 실행되는 쿼리는 12select * from `user`; # 1, 2, 3, 4, 5, 6....select * from `post` where `id` in (1, 2, 3, 4, 5, 6, ...); 위와 같이 쿼리 2개만 실행이 되어 쿼리 실행을 최소화 할 수 있습니다. with() 메소드의 2번째 파라미터를 사용해 제한 할 수도 있습니다. 1234567foreach(User::with(['posts' =&gt; function ($query) &#123; $query-&gt;where('title', 'like', '치킨%') &#125;])-&gt;get() as $user) &#123; echo $user-&gt;post-&gt;title;&#125;; user를 조회할 때, 치킨으로 시작하는 post를 같이 미리 로드 할 수 있습니다. has()has() 메소드를 이용하면, 해당 관계에서 최소 한개를 가지고 있는 결과를 조회합니다 User::has(&#39;posts&#39;)-&gt;get();을 사용하면 post를 한개라도 작성한 회원을 조회할것입니다. 쿼리로 표현한다면, 아래와 비슷할것 같습니다. 123select *from `user` join `post` on `user`.`id` = `post`.`user_id` has 메소드는 2번째 파라미터에 operator 와 3번째 파라미터에 count를 사용할 수 있습니다. 이 파라미터를 사용하면 예로 5개 이상의 글을 작성한 회원을 찾을 수 있습니다.Eloquent를 사용하면 이와같이 작성 할 수 있습니다.User::has(&#39;posts&#39;, &#39;&gt;=&#39;, 5)-&gt;get(); whereHas()그렇다면 whereHas()는 뭐가 다를까요? whereHas() 메소드는 두번째 파라미터로 콜백을 받아 더 복잡한 쿼리를 처리할 수 있습니다. 위와 같은 모델링에서 게시글의 제목이 치킨으로 시작하는 글을 작성한 회원을 찾는다면 아래와 같을것 입니다. 123User::whereHas('posts', function ($query) &#123; $query-&gt;where('title', 'like', '치킨%');&#125;)-&gt;get(); 쿼리로 표현한다면 12345678910111213select *from `user` join `post` on `user`.`id` = `post`.`user_id` and `post`.`title` like '치킨%'ORselect *from `user` join `post` on `user`.`id` = `post`.`user_id`where `post`.`title` like '치킨%' 이와 같이 표현할 수 있을것 같습니다. 참고자료 Stack Overflow -&gt; Laravel - Eloquent “Has”, “With”, “WhereHas” - What do they mean? Laravel 공식 문서 -&gt; Eloquent: Relationships - 관계","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"},{"name":"Laravel","slug":"Laravel","permalink":"https://hodory.dev/tags/Laravel/"},{"name":"Eloquent","slug":"Eloquent","permalink":"https://hodory.dev/tags/Eloquent/"},{"name":"ORM","slug":"ORM","permalink":"https://hodory.dev/tags/ORM/"}]},{"title":"［JS］Knex와 Webpack을 같이 쓰면서 발생한 오류 처리","slug":"knex-with-webpack","date":"2019-04-18T10:10:52.000Z","updated":"2019-06-08T14:57:07.154Z","comments":true,"path":"2019/04/18/knex-with-webpack/","link":"","permalink":"https://hodory.dev/2019/04/18/knex-with-webpack/","excerpt":"12ERROR in &apos;./node_modules/knex/lib/dialects/mssql/index.js&apos;Module not found: Error : Can&apos;t resolve &apos;mssql/lib/base&apos; 프로젝트에 웹팩을 도입하여 사용중, knex 라이브러리를 넣고 나서웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.","text":"12ERROR in &apos;./node_modules/knex/lib/dialects/mssql/index.js&apos;Module not found: Error : Can&apos;t resolve &apos;mssql/lib/base&apos; 프로젝트에 웹팩을 도입하여 사용중, knex 라이브러리를 넣고 나서웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다. 해당 오류를 검색 하였는데,역시나 깃허브 이슈가 있었고(감사합니다),webpack의 config에 아래의 내용을 추가 하였습니다. 123externals: &#123; knex: 'commonjs knex'&#125; 해당 작업 후 빌드는 성공했지만,노드 서버에서 실행시 knex 모듈을 찾을 수 없다는 오류가 나왔습니다.123456789101112131415&#123; &quot;errorMessage&quot;: &quot;Cannot find module &apos;knex&apos;&quot;, &quot;errorType&quot;: &quot;Error&quot;, &quot;stackTrace&quot;: [ &quot;Function.Module._load (module.js:474:25)&quot;, &quot;Module.require (module.js:596:17)&quot;, &quot;require (internal/module.js:11:18)&quot;, &quot;Object.defineProperty.value (/var/task/main.js:1604:18)&quot;, &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;, &quot;Object.&lt;anonymous&gt; (/var/task/main.js:1564:14)&quot;, &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;, &quot;Object.defineProperty.value (/var/task/main.js:1442:20)&quot;, &quot;__webpack_require__ (/var/task/main.js:20:30)&quot; ]&#125; 계속해서 구글링하던중, 다른분의 도움으로 해당 이슈 코멘트를 찾았습니다.해당 코드를 참고하여 mysql2 라이브러리를 사용했기때문에 아래와 같은 코드를 추가 하였습니다.1234567891011121314151617&#123; plugins: [ new webpack.NormalModuleReplacementPlugin(/\\.\\.migrate/, &apos;../util/noop.js&apos;), new webpack.NormalModuleReplacementPlugin(/\\.\\.seed/, &apos;../util/noop.js&apos;), new webpack.IgnorePlugin(/mariasql/, /knex/), new webpack.IgnorePlugin(/mysql/, /knex/), new webpack.IgnorePlugin(/mssql/, /knex/), new webpack.IgnorePlugin(/oracle/, /knex/), new webpack.IgnorePlugin(/oracledb/, /knex/), new webpack.IgnorePlugin(/postgres/, /knex/), new webpack.IgnorePlugin(/redshift/, /knex/), new webpack.IgnorePlugin(/pg-query-stream/, /knex/), new webpack.IgnorePlugin(/sqlite3/, /knex/), new webpack.IgnorePlugin(/strong-oracle/, /knex/), new webpack.IgnorePlugin(/pg-native/, /pg/) ]&#125; 빌드는 성공 했으나 정상 동작하지 않아 확인 해보니 /node_modules/knex/lib/mysql2/index.js 해당 파일에 이러한 코드가 있어서 결국 mysql2를 쓰더라도 mysql 라이브러리가 필요하였습니다. 굳이 mysql2 모듈을 고집 할 필요가 없을것 같아, mysql 모듈로 변경하고,new webpack.IgnorePlugin(/mysql/, /knex/) 를 new webpack.IgnorePlugin(/mysql2/, /knex/), 로 변경하니빌드도 성공하였으며, 정상 동작 하였습니다. 더 좋은 방법이 있을거 같은데 아쉽게도 제가 찾은 방법은 이것 밖에 없었습니다.좋은 해결 방안 있으면 댓글로 공유 부탁 드리겠습니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://hodory.dev/tags/JS/"},{"name":"Webpack","slug":"Webpack","permalink":"https://hodory.dev/tags/Webpack/"}]},{"title":"［PHP］배열 key의 min 또는 max 구하기","slug":"php-array-column","date":"2018-10-27T06:23:32.000Z","updated":"2019-05-12T07:11:32.057Z","comments":true,"path":"2018/10/27/php-array-column/","link":"","permalink":"https://hodory.dev/2018/10/27/php-array-column/","excerpt":"PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요 아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?","text":"PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요 아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요? 또는 이러한 배열에서 특정 키값의 값만 뽑아 배열로 만들고싶다면 어떻게 해야할까요? 12345678910111213141516171819array(3) &#123; [0]=&gt; array(3) &#123; [&quot;title&quot;]=&gt; string(5) &quot;apple&quot; [&quot;cnt&quot;]=&gt; int(1) &quot;5&quot; [&quot;color&quot;]=&gt; string(5) &quot;green&quot; &#125; [1]=&gt; array(3) &#123; [&quot;name&quot;]=&gt; string(4) &quot;pear&quot; [&quot;cnt&quot;]=&gt; int(1) &quot;8&quot; [&quot;color&quot;]=&gt; string(6) &quot;yellow&quot; &#125; 배열을 순회하여 해당 키의 값을 뽑아 배열을 만들고, 최소 또는 최대값이 필요하면 min 또는 max 함수를 적용해야 한다 생각했습니다. 그런 코드는 만들고 싶지 않아 검색을 하다보니 PHP 5.5버전부터는 array_column을 사용하면 쉽게 처리할 수 있었습니다. array array_column ( array $input , mixed $column_key [, mixed $index_key = NULL ] ) 와 같은 구조로 첫번째 파라미터에 해당 배열을 넣고, 두번째 파라미터에 뽑아낼 key를 넣으면 됩니다. 예를들어 아래와 같은 연관 배열에서 cnt로만 배열을 만들려면 이와 같이 할 수 있습니다. 123456789101112131415161718192021222324&lt;?php$arr = [ [ 'title'=&gt;'title1', 'cnt'=&gt;2, 'color'=&gt;'blue', ], [ 'title'=&gt;'title2', 'cnt'=&gt;3, 'color'=&gt;'blue', ],];$cntArr = array_column($arr, 'cnt');var_dump($cntArr);### Result array(2) &#123; [0]=&gt; int(2) [1]=&gt; int(3)&#125; 또한 세번째 파라미터로는 index_key를 넣을 수 있는데요 return 할 배열의 키로 사용할 값을 넣으면 됩니다 예를들어 이렇게 쓸 수 있을것 같았습니다. 12345678910111213141516171819202122232425262728&lt;?php// example code$arr = [ [ 'idx' =&gt; 2555, 'title'=&gt;'title1', 'cnt'=&gt;2, 'color'=&gt;'blue', ], [ 'idx' =&gt; 2982, 'title'=&gt;'title2', 'cnt'=&gt;3, 'color'=&gt;'blue', ],];$cntArr = array_column($arr, 'cnt', 'idx');var_dump($cntArr);### Resultarray(2) &#123; [2555]=&gt; int(2) [2982]=&gt; int(3)&#125; 이와같이 사용하면 해당 idx의 cnt를 뽑을 수 있어 더 효율적으로 사용할 수 있을거 같습니다. 더 좋은 사용 방안 있으시면 댓글로 부탁드리겠습니다. 참고자료 StackOverFlow - Find highest value in multidimensional array PHP 공식문서 - array_column()","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"},{"name":"str_pad","slug":"str-pad","permalink":"https://hodory.dev/tags/str-pad/"},{"name":"function","slug":"function","permalink":"https://hodory.dev/tags/function/"}]},{"title":"［VueJS］vue.js에서 이벤트 버스 사용하기","slug":"vuejs-eventbus","date":"2018-08-27T07:51:38.000Z","updated":"2019-04-20T15:56:26.346Z","comments":true,"path":"2018/08/27/vuejs-eventbus/","link":"","permalink":"https://hodory.dev/2018/08/27/vuejs-eventbus/","excerpt":"MPA(Multi Page Application)에서 Vue를 적용 시키던중 부모-자식간의 관계가 아닌 컴포넌트 간의 동작에 따른 데이터 변화와 이벤트 처리가 필요해졌습니다.","text":"MPA(Multi Page Application)에서 Vue를 적용 시키던중 부모-자식간의 관계가 아닌 컴포넌트 간의 동작에 따른 데이터 변화와 이벤트 처리가 필요해졌습니다. 주로 공통 데이터를 다루기 위해 사용하는 부분이라 Vuex를 써볼까도 했지만, Vuex 튜토리얼에서 앱이 단순하다면 Vuex없이는 괜찮을 것입니다. 간단한 글로벌 이벤트 버스만 있으면됩니다 라는 글귀를 읽고, 글로벌 이벤트 버스를 사용하자로 마음을 굳혔습니다. 아래와 같이 공통으로 사용할 이벤트버스 js 파일을 생성합니다.Vue EventBus 객체를 생성하여 export 하여 다른 파일에서도 로드하여 사용 할 수 있도록 합니다.1234// /js/eventBus.jsimport Vue from 'vue'const EventBus = new Vue();export default EventBus; 그 후 해당 이벤트 버스를 사용할 컴포넌트들에서 eventBus.js를 import 하여 아래와 같이 사용했습니다.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/******** /js/Button.vue********/&lt;template&gt; &lt;button @click.prevent=\"onClickButton\"&gt;Click Me&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import EventBus from \"./eventBus.js\";export default &#123; props: ['code', 'title'], methods: &#123; onClickButton() &#123; EventBus.$emit(\"onModalButtonClick\", this.code, this.title) &#125; &#125; &#125;&lt;/script&gt;/******** /js/Modal.vue********/&lt;template&gt; &lt;div id=\"myModal\" class=\"modal\" v-show=\"_isShow\"&gt; ... &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import EventBus from './eventBus.js';export default &#123; data() &#123; return &#123; _isShow: false, code: null, title: null, &#125; &#125;, mounted() &#123; EventBus.$on(\"onModalButtonClick\", (code, title) =&gt; &#123; this.code = code; this.title = title; this._isShow = true; &#125;); &#125;&#125;... &lt;/script&gt; 실제로는 위의 코드보다 복잡했지만, 예시에 불필요한 부분은 제거하였습니다.","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/categories/Javascript/"},{"name":"Vue.js","slug":"Javascript/Vue-js","permalink":"https://hodory.dev/categories/Javascript/Vue-js/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://hodory.dev/tags/JS/"},{"name":"VueJS","slug":"VueJS","permalink":"https://hodory.dev/tags/VueJS/"}]},{"title":"［GCP］ Nuxt.js GAE에 배포 이슈사항","slug":"deploy-nuxt-to-GAE","date":"2018-07-20T05:45:42.000Z","updated":"2019-05-10T15:38:07.314Z","comments":true,"path":"2018/07/20/deploy-nuxt-to-GAE/","link":"","permalink":"https://hodory.dev/2018/07/20/deploy-nuxt-to-GAE/","excerpt":"502 Bad Gateway배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데 에러 로그를 보니 localhost:8080로 접근하고 있었다","text":"502 Bad Gateway배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데 에러 로그를 보니 localhost:8080로 접근하고 있었다 검색 결과 NuxtJS의 실행 포트를 변경할 수 있는 방법이 소개 되어있었다. package.json에 다음과 같이 작성하면 된다. 123456789&#123; ... &quot;config&quot;: &#123; &quot;nuxt&quot;: &#123; &quot;host&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: &quot;8080&quot; &#125; &#125;&#125; 또는 123456&#123; &quot;scripts&quot;: &#123; ... &quot;start&quot;: &quot;HOST=0.0.0.0 PORT=8080 nuxt build &amp;&amp; nuxt start&quot; &#125;&#125; 으로 작성하여 다시 deploy 하면 정상적으로 동작한다. 참고자료 NuxtJS Github ISSUE - 334(Google Cloud Deployment) NuxtJS FAQ - host 와 port 번호를 변경하려면?","categories":[{"name":"ETC","slug":"ETC","permalink":"https://hodory.dev/categories/ETC/"},{"name":"GCP","slug":"ETC/GCP","permalink":"https://hodory.dev/categories/ETC/GCP/"}],"tags":[{"name":"GCP","slug":"GCP","permalink":"https://hodory.dev/tags/GCP/"},{"name":"GAE","slug":"GAE","permalink":"https://hodory.dev/tags/GAE/"},{"name":"NuxtJS","slug":"NuxtJS","permalink":"https://hodory.dev/tags/NuxtJS/"}]},{"title":"［Database］ postgresql와 mysql 뭐가 다를까?","slug":"pgsql-vs-mysql","date":"2018-04-23T08:22:45.000Z","updated":"2019-04-20T16:02:46.584Z","comments":true,"path":"2018/04/23/pgsql-vs-mysql/","link":"","permalink":"https://hodory.dev/2018/04/23/pgsql-vs-mysql/","excerpt":"PostgreSQL 과 MySQL의 차이점 PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.) Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.)","text":"PostgreSQL 과 MySQL의 차이점 PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.) Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.) 스키마를 별도로 지정하지 않을 경우, public이라는 스키마를 기본적으로 사용합니다. 데이터베이스가 다르면 물리적으로 분리되어있다는것을 의미합니다. 서로 다른 Schema간에는 JOIN이 가능합니다. 구조 참고자료 postgreSQL 구조 이미지 - 구루비 postgreSQL 소개","categories":[{"name":"ETC","slug":"ETC","permalink":"https://hodory.dev/categories/ETC/"},{"name":"Database","slug":"ETC/Database","permalink":"https://hodory.dev/categories/ETC/Database/"}],"tags":[{"name":"DataBase","slug":"DataBase","permalink":"https://hodory.dev/tags/DataBase/"},{"name":"postgresql","slug":"postgresql","permalink":"https://hodory.dev/tags/postgresql/"},{"name":"pgsql","slug":"pgsql","permalink":"https://hodory.dev/tags/pgsql/"},{"name":"mysql","slug":"mysql","permalink":"https://hodory.dev/tags/mysql/"},{"name":"pgSQL vs MySQL","slug":"pgSQL-vs-MySQL","permalink":"https://hodory.dev/tags/pgSQL-vs-MySQL/"}]},{"title":"［PHP］ PHP4.x 버전과 PHP 5.x 버전 비교(Comparison between PHP4 and PHP5)","slug":"php4-vs-php5","date":"2018-04-19T17:04:12.000Z","updated":"2019-05-12T07:11:32.084Z","comments":true,"path":"2018/04/20/php4-vs-php5/","link":"","permalink":"https://hodory.dev/2018/04/20/php4-vs-php5/","excerpt":"PHP5에서 무엇이 바뀌었을까? 젠드엔진2가 내장되었습니다. PHP GCI 버전이 php.exe 에서 php-cgi.exe 로 변경되었습니다. PHP CLI 버전이 cli/php.exe 에서 주 디렉토리로 변경되었습니다. PHP CLI 버전은 php.ini 지시어 설정과 상관없이 항상 전역 $argv(Array of arguments passed to script) 와 $argc(The number of arguments passed to script) 변수를 가지며, register_argc_argv(argv와 argc 변수를 선언할지 여부 설정)를 off로 설정해도 영향을 미치지 않습니다.","text":"PHP5에서 무엇이 바뀌었을까? 젠드엔진2가 내장되었습니다. PHP GCI 버전이 php.exe 에서 php-cgi.exe 로 변경되었습니다. PHP CLI 버전이 cli/php.exe 에서 주 디렉토리로 변경되었습니다. PHP CLI 버전은 php.ini 지시어 설정과 상관없이 항상 전역 $argv(Array of arguments passed to script) 와 $argc(The number of arguments passed to script) 변수를 가지며, register_argc_argv(argv와 argc 변수를 선언할지 여부 설정)를 off로 설정해도 영향을 미치지 않습니다. ISAPI 모듈들의 이름이 php4xxx에서 php5xxx로 바뀌었습니다. 프로퍼티가 없는 객체를 “빈” 것으로 판단하지 않습니다. 인터페이스 등을 사용할 경우, 사용 전 선언해야합니다. 포함한 파일에 함수정의가 있을경우, 그 파일이 두번 포함 되었을 때,PHP5에서는 치명적인 오류가 발생합니다. include_once를 사용하길 권장합니다. 키워드 예외처리(try()-catch()-finally()[v5.5~]) 네임스페이스[v5.3~] 인터페이스(interface,implements) 추상클래스(abstract) 접근제어자(private,protected,public) instanceof : 객체의 클래스 확인 clone : 객체 복제 컴파일 상수 __NAMESPACE__ [v5.3~] __DIR__ [v5.3~] DataBase MySQL 클라이언트 라이브러리를 포함하지 않습니다. MySQL 4.1 이상에서 동작하는 MySQLi가 추가되었습니다. SQLite 확장 모듈이 포함됩니다. 새로운 함수가 추가되었습니다.(New Functions) 배열 (9개) array_combine() : 하나의 배열은 키로, 하나의 배열은 값으로 가지는 배열 생성 합니다. array_walk_recursive() : 배열의 모든 원소에 사용자 함수를 적용합니다. 이 외의 7개 함수 iconv (7개) iconv_strlen() : 문자열의 문자 수를 반환 합니다. iconv_strpos() : haystack에서 needle이 처음으로 나타나는 위치를 찾습니다. iconv_strrpos() : haystack에서 needle이 마지막으로 나타나는 위치를 찾습니다. iconv_substr() : 문자열의 일부를 잘라냅니다. 이 외의 3개 함수 스트림 (8개) stream_copy_to_stream() : 한 스트림의 데이터를 다른 스트림으로 복제합니다. stream_get_line() : 스트림 자원에서 주어진 구분자로 나타나는 열을 얻습니다. 이 외의 6개 함수 날짜와 시간 관련 (4개) idate() : 지역 날짜/시간을 정수로 바꿉니다. date_sunset() : 주어진 날짜와 위치의 일몰 시간을 반환합니다. date_sunrise() : 주어진 날짜와 위치의 일출 시간을 반환합니다. time_nanosleep() : 초와 나노초의 수만큼 지연합니다. 문자열 (3개) str_split() : 문자열을 배열로 변환합니다. strbrk() : 문자열에서 문자 세트에 있는 문자를 검색합니다.(대소문자 구분하여 세트중 한글자라도 먼저 나오는것을 찾습니다.) substr_compare() : 두 문자열을 offset부터 length까지(대소문자 구분없이:옵션) 바이너리로 안전하게 비교합니다. 인터베이스 (19개) 기타 (30개) file_put_contents() : 문자열을 파일로 씁니다. get_headers() : HTTP 요청의 응답으로 서버가 보낸 모든 헤더를 가져옵니다. http_build_query() : 배열을 이용하여 URL-encode한 쿼리 문자열을 생성합니다. scandir() : 지정한 경로 안에 파일과 디렉토리 목록을 배열로 반환합니다. 이 외의 27개 함수 자세한 내용은 해당링크에서 확인 하실 수 있습니다. 새로운 지시어 (php.ini 지시어) mail.force_extra_parameter register_long_arrays session.hash_function : 해시 함수 선택(MD5 or SHA-1) session.hash_bits_per_character zend.ze1_compatibility_mode : 젠드엔진1 (PHP 4)호환모드 활성화 기타 자세한 사항은 해당링크에서 확인 하실 수 있습니다. 참고자료 PHP 공식문서 - PHP4에서 PHP 5.0.x로 이행","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"},{"name":"PHP5","slug":"PHP5","permalink":"https://hodory.dev/tags/PHP5/"},{"name":"PHP4","slug":"PHP4","permalink":"https://hodory.dev/tags/PHP4/"}]},{"title":"［Algorithm］이진탐색 알고리즘(Binary Search Algorithm)","slug":"binary-search","date":"2018-04-19T03:54:39.000Z","updated":"2019-04-20T15:57:39.069Z","comments":true,"path":"2018/04/19/binary-search/","link":"","permalink":"https://hodory.dev/2018/04/19/binary-search/","excerpt":"이진탐색 정의 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것. 오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다.","text":"이진탐색 정의 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것. 오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다. 구현 해당 배열에서 가운데 값을 찾고, 그 값과 비교하여 해당 인덱스에서의 배열의 값이 찾는 값 보다 클때는 앞쪽에서 찾고, 작을때는 뒤쪽에서 찾으면 된다. 코드 123456789101112131415161718192021// 해당 인덱스를 출력해주는 알고리즘 입니다.binarSearch = (data, value) =&gt; &#123; let start = data[0], end = data.slice(-1)[0], index = 0, last = data.length-1 if (value &lt; start || value &gt; end) return -1; while (index &lt;= last) &#123; let center = parseInt((index+last) / 2) if (data[center] === value) return center; else if(data[center] &gt; value) // 해당 인덱스의 배열값이 더 크기때문에 최대 인덱스를 줄인다. last = center - 1 else // 해당 인덱스의 배열값이 더 작기때문에 최소 인덱스를 늘린다. index = center + 1 &#125;&#125;// 호출binarSearch([1,5,7,11,25],25) // 4binarSearch([1,5,7,11,14,16,18,25],18) // 6 참고자료 위키백과 나무위키","categories":[{"name":"ETC","slug":"ETC","permalink":"https://hodory.dev/categories/ETC/"},{"name":"Algorithm","slug":"ETC/Algorithm","permalink":"https://hodory.dev/categories/ETC/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://hodory.dev/tags/Algorithm/"}]},{"title":"［ETC］Triple DES(3-DES)를 사용하지 않는 이유","slug":"why-not-use-3des","date":"2018-04-18T09:27:20.000Z","updated":"2019-04-20T15:59:00.568Z","comments":true,"path":"2018/04/18/why-not-use-3des/","link":"","permalink":"https://hodory.dev/2018/04/18/why-not-use-3des/","excerpt":"대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다. DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다. 그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요? 암호화키가 DES 표준에 따라 56비트로 제한됩니다. AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다. 암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.)","text":"대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다. DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다. 그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요? 암호화키가 DES 표준에 따라 56비트로 제한됩니다. AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다. 암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.) 결론적으로 대칭키 암호화 알고리즘에서는 DES 암호화 알고리즘을 AES 암호화 알고리즘이 대체하게 되어 없어졌다 할 수 있습니다. 기존에는 SHA-2 알고리즘이 나와 없어진 줄 알았으나, SHA(Secure Hash Algorithm) Encryption(암호화)과 Hash(해쉬)는 다른 의미였습니다. Encryption(암호화)는 양방향 통신을 위해 특정 키를 가지고 복호화가 가능한 출력을 만들어 내는 것입니다. 대표적으로는 아래와 같이 있습니다. 대칭 암호화 DES(Data Encryption Standard) T-DES(Triple Data Encryption Standard) AES(Advanced Encryption Standard) 비대칭 암호화 RSA Hash(해시)는 임의의 길이의 입력을 고정된 길이의 출력으로 바꾸어주고, 복호화가 되지않아 원문을 알 수 없으나, 같은 입력은 같은 출력을 보장합니다. 대표적으로는 아래와 같이 있습니다. MD5(Message Digest) SHA(Secure Hash Algorithm) 참고자료 AES와 3DES의 차이점 대칭키 암호화 - AES, 3DES AES와 SHA 차이","categories":[{"name":"ETC","slug":"ETC","permalink":"https://hodory.dev/categories/ETC/"}],"tags":[{"name":"Etc.","slug":"Etc","permalink":"https://hodory.dev/tags/Etc/"},{"name":"Security","slug":"Security","permalink":"https://hodory.dev/tags/Security/"}]},{"title":"［Algorithm］반복문 없이 1부터 10까지 합 구하기","slug":"1-to-10-calc-without-for-loop","date":"2018-04-18T06:53:47.000Z","updated":"2019-05-09T15:30:59.501Z","comments":true,"path":"2018/04/18/1-to-10-calc-without-for-loop/","link":"","permalink":"https://hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/","excerpt":"1부터 10까지 합 구하기 먼저 방법은 무엇이 있을까? 등차 수열의 합 재귀함수 방식 기타 등등… 하나씩 구현해보자","text":"1부터 10까지 합 구하기 먼저 방법은 무엇이 있을까? 등차 수열의 합 재귀함수 방식 기타 등등… 하나씩 구현해보자 등차 수열 등차 수열이란 ?연속하는 두 항의 차이가 모두 일정한 수열. 등차 수열의 합 공식 (출처 : 위키피디아) 코드 구현1234addFunction = (start, end) =&gt; &#123; return (end-start+1)*(start+end)/2&#125;addFunction(1,10) 재귀함수 방식 재귀 함수란?자기 자신을 재 참조 하는 함수 재귀함수 구조(출처 : 위키피디아) ex)123456factorial = (v) =&gt; &#123; if (v &lt;= 1) return 1 else return v * factorial(v-1)&#125; 코드 구현 ex)123456addFunction = (v) =&gt; &#123; if (v &lt;= 1) return 1 else return v + addFunction(v-1)&#125; 참고자료 위키백과 - 등차수열 위키백과 - 재귀함수","categories":[{"name":"ETC","slug":"ETC","permalink":"https://hodory.dev/categories/ETC/"},{"name":"Algorithm","slug":"ETC/Algorithm","permalink":"https://hodory.dev/categories/ETC/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://hodory.dev/tags/Algorithm/"}]},{"title":"［PHP］ PSR(PHP Standards Recommendations)이란?","slug":"what-is-psr","date":"2018-04-17T17:28:50.000Z","updated":"2019-05-12T07:11:32.096Z","comments":true,"path":"2018/04/18/what-is-psr/","link":"","permalink":"https://hodory.dev/2018/04/18/what-is-psr/","excerpt":"PSR이란?PHP Standards Recommendations의 약자로 PHP-FIG(PHP-FrameWork Interop Group)에서 만든 표준 권고안입니다. PSR-0 PSR-1 PSR-2 PSR-3 PSR-4","text":"PSR이란?PHP Standards Recommendations의 약자로 PHP-FIG(PHP-FrameWork Interop Group)에서 만든 표준 권고안입니다. PSR-0 PSR-1 PSR-2 PSR-3 PSR-4 작성예정 목록 PSR-6 PSR-7 PSR-11 PSR-13 PSR-15 PSR-16 PSR-0 (DEPRECATED) : Autoloading Standard오토로딩 표준으로 PSR-4가 제정되며 DEPRECATED 되었습니다. \\&lt;Vendor Name&gt;\\(&lt;NameSpace&gt;\\)*&lt;Class Name&gt;의 구조를 따릅니다. 각 네임스페이스는 (&quot;Vendor Name&quot;)이 최상위 네임스페이스로 있어야합니다. 각 네임스페이스는 원하는 만큼 하위 네임스페이스를 가질 수 있습니다. 각 네임스페이스 구분자는 파일시스템에서 로딩될때 DIRECTORY_SEPARATOR로 변환됩니다. 클래스명의 각 _ 문자는 DIRECTORY_SEPARATOR로 변환됩니다. 기타 자세한 사항은 PSR-0에서 확인 가능합니다. Example)\\Doctrine\\Commone\\IsolatedClassLoader=&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php\\Symfony\\Core\\Request=&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php PSR-1 : Basic Coding StandardPHP 코드를 공유하는데 있어 기술적 상호 운용성을 위해 고려 해야 할 표준 코딩 가이드입니다. &lt;?php 와 &lt;?= 태그만 사용해야합니다. PHP 코드에는 BOM(Byte Order Mark) 없이 UTF-8로만 사용해야합니다. 네임스페이스와 클래스는 PSR(PSR-0, PSR-4)의 오토로딩을 따라야합니다. 클래스명은 StudlyCaps 와 같이 첫글자를 대문자로 합니다.12345678910&lt;?php// PHP 5.3 이후 버전namespace Vendor\\Model;class Foo&#123;&#125;// PHP 5.3 이전 버전class Vendor_Model_Foo&#123;&#125; 상수는 _를 구분자로 대문자로 선언해야합니다. ex)const CURRENT_VERSION = 1.0; 프로퍼티명에 대한 규칙은 정해져 있지않으나, 스코프에서 일관적이어야합니다. 메소드는 카멜케이스를 사용해야합니다. ex)camelCase() PSR-2 : Coding Style GuidePSR-1의 확장으로 표준 코딩 스타일 가이드를 다룹니다. PSR-1을 따라야합니다. 들여쓰기 할때는 탭을 사용하지 않고 스페이스 4개를 사용합니다. 라인 수에 대한 엄격한 제한은 아니지만, 한 줄에는 120자 이하, 라인 수는 80개 이하로 작성합니다. namespace선언과 use 선언들 후에는 한줄을 띄워 작성합니다. 클래스와 메소드들의 여는 괄호는 다음줄에 작성하고, 닫는 괄호는 내용이 끝난 다음 줄에 작성합니다. ex)12345678910111213&lt;?phpnamespace Vendor\\Package;use BazClass as Baz;use OtherVendor\\OtherPackage\\BazClass;class TestClass extends Baz&#123; public function alert($msg) &#123; echo $msg; &#125;&#125; 모든 프로퍼티와 메소드는 접근제어자가 선언되어야합니다. abstract와 final 키워드는 접근제어자 이전에 선언되고, static 키워드는 접근제어자 이후에 선언되어야합니다. 제어문은 사이에 스페이스가 있어야합니다. 메소드와 함수호출은 그렇지 않습니다. ex)1234567&lt;?phppublic function Foo($a, $b)&#123; if ($a === $b) &#123; echo \"equal\"; &#125;&#125;Foo(1, 2); PHP 파일은 빈 줄로 끝나야 하며, PHP로만 이루어진 파일은 닫는 태그인 ?&gt;를 생략해야합니다. PSR-3 : Logger Interface로깅 라이브러리의 공통적인 인터페이스를 명세합니다.라이브러리가 Psr\\Log\\LoggerInterface의 객체를 받아 간편하고 보편적인 방법으로 그것에 로그를 작성할 수 있도록 하는것이 목표입니다. 로거 인터페이스는 8개의 RFC 5424 레벨(debug, info, notice, warning, error, critical, alert, emergency)로 로그 작성을 하기 위한 메소드를 제공합니다. 9번째 메소드인 log는 첫번째 인자로 로그 레벨을 받고, 호출시 해당 레벨의 메소드를 호출하는것과 같은 결과를 가집니다. 해당 레벨의 메소드가 정의되어 있지 않는 경우, Psr\\Log\\InvalidArgumentException 에러를 보내야합니다. 모든 메소드는 string 형식의 메시지를 받거나, __toString() 처리 된 object를 받습니다. 컨텍스트에 주어진 값을 execption에 보내거나, php error나 warning, notice로 보내면 안됩니다. PSR-4 : Autoloader파일 경로를 통해 클래스를 오토로딩 하기위한 명세로, PSR-0를 포함하고 있습니다. class라는 용어는 클래스와 인터페이스, 트레이트 또는 다른 비슷한 구조들을 의미합니다. 정규화 된 클래스명의 형식은 다음을 따릅니다. \\&lt;NamespaceName&gt;(\\&lt;SubNamespaceNames&gt;)*\\&lt;ClassName&gt; 네임스페이스의 맨 처음은 “Vendor namespace”로 알려진것으로 시작합니다. 하나 이상의 서브네임스페이스명을 가집니다. 끝을 클래스명으로 작성 합니다. 소문자와 대문자의 조합을 혼합하여 작성할 수 있습니다. 대소문자를 구분하여 참조해야합니다.123456789&lt;?php// guzzle/src/ClientInterface.phpnamespace GuzzleHttp;use GuzzleHttp\\Exception\\GuzzleException;interface ClientInterface&#123;&#125; GuzzleHttp\\Exception\\GuzzleException은GuzzleHttp의 Base-Directory(src) 안에 있는 Exception\\GuzzleException.php에 위치합니다. 참고자료 PSR 공식문서 PHP 표준 권고(PSR) - 정광섭님","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"},{"name":"PSR","slug":"PSR","permalink":"https://hodory.dev/tags/PSR/"}]},{"title":"［JS］ ES5와 ES6 뭐가 다를까?","slug":"es5-vs-es6","date":"2018-04-16T16:26:53.000Z","updated":"2019-05-12T07:13:37.763Z","comments":true,"path":"2018/04/17/es5-vs-es6/","link":"","permalink":"https://hodory.dev/2018/04/17/es5-vs-es6/","excerpt":"ES5와 ES6를 비교 할겸ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다. Const Variables let Variables Block-Scoped Function","text":"ES5와 ES6를 비교 할겸ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다. Const Variables let Variables Block-Scoped Function Arrow Function Default Parameter Rest Parameter Spread Operator Template Literals Ehhanced Object Properties Property Shorthand Computed Property Names Method Properties Export / Import Class Definition Promise Promise all Const 변수Immutable varibale인 Const 변수(상수 변수)를 지원합니다.(블록-스코프 변수) 12const PI = 3.141592console.log(PI) // 3.141592 let 변수기존의 함수-스코프였던 변수와 다르게 Hoisting 없는 블록-스코프 변수를 지원합니다. 1234567891011121314151617181920212223242526272829// ES5console.log('for loop start')for(var i=0; i&lt;10; i++) &#123; console.log('i : ' + i)&#125;console.log('for loop end i : ' + i) // for loop end i : 10function counter() &#123; for(var j=0; j&lt;10; j++) &#123; console.log('j : ', j) &#125;&#125;counter()console.log('j : ', j) // j is not defined// ES6console.log('for loop start')for(let i=0; i&lt;10; i++) &#123; console.log('i : ' + i)&#125;console.log('for loop end i : ' + i) // j is not definedfunction counter() &#123; for(let j=0; j&lt;10; j++) &#123; console.log('j : ', j) &#125;&#125;counter()console.log('j : ',j) // j is not defined 또한 var 변수는 재선언,재할당이 가능하지만 let 변수는 재선언이 불가능합니다 (const 변수는 immutable variable이므로 재할당도 불가능) 1234567891011121314var a = 'foo'var a = 'bar'// hoisting으로 ReferenceError가 나지않는다.b = 'foo'var blet c = 'foo'let c = 'bar' // Uncaught SyntaxError: Identifier 'c' has already been declaredc = 'bar' // \"bar\"const d = 'foo'const d = 'bar' // Uncaught SyntaxError: Identifier 'd' has already been declaredd = 'bar' // Uncaught TypeError: Assignment to constant variable. Block-Scoped 함수블록-스코프 함수 정의 방식 개선1234567891011121314151617181920// ES6&#123; function foo () &#123; return 1 &#125; console.log(foo()) // 1 &#123; function foo() &#123; return 2 &#125; console.log(foo()) // 2 &#125; console.log(foo()) // 1&#125;// ES5(function () &#123; var foo = function () &#123; return 1;&#125; foo() === 1; (function () &#123; var foo = function () &#123; return 2; &#125; foo() === 2; &#125;)(); foo() === 1;&#125;)(); Arrow Functionfunction과 return을 묶어 화살표 함수로 변형 가능합니다12345678910111213// ES6nums = evens.map((v,i) =&gt; v+i)this.nums.forEach((v) =&gt; &#123; if(v % 2 === 0) this.evens.push(v)&#125;)// ES5nums = evens.map(function (v, i) &#123; return v+i; &#125;);var self = this;this.nums.forEach(function (v) &#123; if(v % 2 === 0) self.evens.push(v);&#125;); 디폴트 파라미터타 언어에서 사용 할 수 있었던 디폴트 파라미터가 지원됩니다. 123456789101112131415// ES6function foo (x, y=2, z=3) &#123; return x + y + z&#125;foo(1) // 6// ES5function foo (x, y, z) &#123; if(y === undefined) y = 2; if(z === undefined) z = 3; return x + y + z;&#125;;foo(1); // 6 Rest Parameter지정되지 않은 매개변수 집합을 하나의 변수에 담을 수 있습니다. 123456789101112// ES6function foo (x, y, ...a) &#123; return (x * y) + a.length&#125;foo(1, 2, \"baz\", true , 3, [2]) // 6// ES5function foo (x,y) &#123; var a = Array.prototype.slice.call(arguments, 2); return (x * y) + a.length;&#125;;foo(1, 2, \"baz\", true , 3, [2]); // 6 Spread Operator (전개연산자)2개 이상의 인수나 2개이상의 요소 또는 2개이상의 변수가 해당되는 곳에 확장 될 수 있도록 합니다. 12345678910111213function myFunc(x, y, z)&#123;&#125;// ES6let params = [ \"Foo\", true, 2 ]let others = [ 1, 2, ...params ] // [ 1, 2, \"Foo\" ,true, 2 ]let str = \"Bar\"let chars = [ ...str ] // [ \"B\", \"a\", \"r\"]myFunc(1, 2, ...params);// ES5var params = [ \"Foo\", true, 2 ];var others = [ 1, 2 ].concat(params); // [ 1, 2, \"Foo\" ,true, 2 ]var str = \"Bar\";var chars = str.split(\"\"); // [ \"B\", \"a\", \"r\"]myFunc.apply(null, [1, 2].concat(params)); Template Literals문자열 다중 행 처리와 보간문자 처리를 할 수 있습니다.12345678910111213141516// ES6let user = &#123; name : \"Foo\" &#125;let info = &#123; id: \"bar\", email: \"Foo@example.com\"&#125;let userInfo = `Hello $&#123;user.name&#125;.Your ID is $&#123;info.id&#125; and email is $&#123;info.email&#125;.`// Hello Foo.// Your ID is bar// and email is Foo@example.com// ES5var user = &#123; name : \"Foo\" &#125;var info = &#123; id: \"bar\", email: \"Foo@example.com\"&#125;var userInfo = \"Hello \" + user.name + \".\\n\"+\"Your ID is \" + info.id + \"\\n\"\"and email is \"+info.email+\".\"; Enhanced Object PropertiesProperty Shorthand공통 객체 속성 정의를 간결하게 할 수 있습니다.1234567// ES6let x = 0, y = 0obj = &#123;x, y&#125;// ES5var x = 0, y = 0;obj = &#123;x: x , y: y&#125;; Computed Property NamesObject 프로퍼티 정의에 계산된 이름을 지원합니다 1234567891011// ES6let obj = &#123; foo: \"Bar\", [\"Baz\" + myFunc() ]: 42&#125;// ES5var obj = &#123; foo: \"Bar\"&#125;;obj[\"Baz\" + myFunc() ] = 42; Method Properties일반적인 함수와 제너레이터 함수의 Object 프로퍼티 정의에 메소드를 표기할 수 있도록 지원합니다. 12345678910111213// ES6obj = &#123; foo (a, b) &#123;&#125;, bar (x ,y) &#123;&#125;, *baz (x, y) &#123;&#125;&#125;// ES5obj = &#123; foo: function (a, b) &#123;&#125;, bar : function (x, y) &#123;&#125;, // baz : es5에서는 대체할 것이 없습니다.&#125; Export / Import값을 export/import로 모듈에 가져오거나 모듈로 내보낼 수 있습니다. 1234567891011121314151617181920212223// ES6// lib/math.jsexport function sum (x ,y) &#123; return x + y &#125;export var pi = 3.141592// Foo.jsimport * as math from \"lib/math\"console.log(\"2pi = \" + math.sum(math.pi, math.pi))// Bar.jsimport &#123; sum, pi &#125; from \"lib/math\"console.log(\"2pi = \" + sum(pi,pi))//ES5// lib/math.jsLibMath = &#123;&#125;;LibMath.sum = function (x ,y) &#123; return x + y &#125;;LibMath.pi = 3.141592;// Foo.jsvar math = LibMath;console.log(\"2pi = \" + math.sum(math.pi, math.pi));// Bar.jsvar sum = LibMath.sum, pi = LibMath.pi;console.log(\"2pi = \" + sum(pi,pi)); Class Definition클래스를 지원합니다 (이외에도 상속, 오버로딩, 정적 클래스멤버, Getter/Setter를 지원합니다.) 123456789101112131415161718192021// ES6class Car &#123; constuctor (id, x ,y) &#123; this.id = id this.move(x,y) &#125; move (x, y) &#123; this.x = x this.y = y &#125;&#125;// ES5var Car = function (id, x ,y) &#123; this.id = id; this.move(x, y);&#125;;Car.prototype.move = function (x, y) &#123; this.x = x; this.y = y;&#125; Promise비동기 처리 이후 동작을 순차적,또는 병렬로 진행하기 위해 사용하는 클래스. 기존 Callback Hell에서 벗어날 수 있도록 도와줍니다(잘 구현 했을 경우….) 1234567891011121314151617181920212223242526// ES6let _promise = () =&gt; &#123; return new Promise((resolve,reject) =&gt; &#123; if(success)&#123; resolve(value) // success &#125; else &#123; reject(reason) // fail &#125; &#125;)&#125;_promise() .then( (res) =&gt; &#123; //success일때 처리 console.log(res) &#125;, (err) =&gt; &#123; //reject 일때 처리 console.error(err) &#125; )_promise() .then(...) .catch((err) =&gt; &#123; console.error(err) &#125;) 여러개의 프로미스가 모두 완료 될때 실행하려면요? Promise-all 을 이용합니다.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657let _promise1 = new Promise((resolve,reject) =&gt; &#123; if(success)&#123; resolve(value) // success &#125; else &#123; reject(reason) // fail &#125; &#125;)let _promise2 = new Promise((resolve,reject) =&gt; &#123; if(success)&#123; resolve(value) // success &#125; else &#123; reject(reason) // fail &#125; &#125;)Promise.all([_promise1, _promise2]).then( (res) =&gt; &#123; // resolve 된 결과 처리 console.log(res) &#125;, (err) =&gt; &#123; // reject 된 결과 처리 console.log(err) &#125;)// ORlet _promise1 = () =&gt; &#123; return new Promise((resolve,reject) =&gt; &#123; if(success)&#123; resolve(value) // success &#125; else &#123; reject(reason) // fail &#125; &#125;)&#125;let _promise2 = () =&gt; &#123; return new Promise((resolve,reject) =&gt; &#123; if(success)&#123; resolve(value) // success &#125; else &#123; reject(reason) // fail &#125; &#125;)&#125;Promise.all([_promise1(), _promise2()]).then( (res) =&gt; &#123; // resolve 된 결과 처리 console.log(res) &#125;, (err) =&gt; &#123; // reject 된 결과 처리 console.log(err) &#125;) 참고자료 MDN ES-6 기능 소개 Promise ES6 Promises(1) - the API 도대체 Promise는 어떻게 쓰는거야?","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://hodory.dev/tags/JS/"},{"name":"ES5","slug":"ES5","permalink":"https://hodory.dev/tags/ES5/"},{"name":"ES6","slug":"ES6","permalink":"https://hodory.dev/tags/ES6/"},{"name":"ES5 vs ES6","slug":"ES5-vs-ES6","permalink":"https://hodory.dev/tags/ES5-vs-ES6/"}]},{"title":"［Node.js］Express.js로 NodeJS 시작하기","slug":"start-nodejs","date":"2018-03-11T12:57:18.000Z","updated":"2019-04-26T13:15:15.622Z","comments":true,"path":"2018/03/11/start-nodejs/","link":"","permalink":"https://hodory.dev/2018/03/11/start-nodejs/","excerpt":"","text":"express 제너레이터 설치1npm install express-generator ejs 템플릿을 이용하여 myapp 디렉토리에 생성1express myapp --view=ejs myapp 디렉토리로 이동하여 npm install(패키지 설치)1$ cd myapp &amp; npm install 서버 실행1$ npm start POST전송시 필요한 body-parser와 express-session 설치1$ npm install body-parser express-session 기존에는 NodeJS에서 POST 요청 데이터를 추출 할 수 있도록 하기 위하여 bodyParser를 설치해야 했는데 express-generator에 추가 되었다","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/categories/Javascript/"},{"name":"NodeJS","slug":"Javascript/NodeJS","permalink":"https://hodory.dev/categories/Javascript/NodeJS/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://hodory.dev/tags/Javascript/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://hodory.dev/tags/NodeJS/"},{"name":"Node","slug":"Node","permalink":"https://hodory.dev/tags/Node/"}]},{"title":"［PHP］ 에러 보여주기","slug":"php-view-error","date":"2017-11-17T06:12:22.000Z","updated":"2019-05-12T07:11:32.045Z","comments":true,"path":"2017/11/17/php-view-error/","link":"","permalink":"https://hodory.dev/2017/11/17/php-view-error/","excerpt":"","text":"배포 서버에서는 권장하지 않는 설정입니다.테스트 서버에서 에러 메세지를 확인하고 싶을때해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다.1234&lt;?php error_reporting(E_ALL); //모든 PHP 에러를 리포팅함 ini_set(\"display_errors\", 1); //php.ini 파일의 'display_errors'를 활성화 시킴?&gt;","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"},{"name":"ERROR","slug":"ERROR","permalink":"https://hodory.dev/tags/ERROR/"},{"name":"INI_SET","slug":"INI-SET","permalink":"https://hodory.dev/tags/INI-SET/"}]},{"title":"［Docker］명령어 정리","slug":"docker-command","date":"2017-09-01T07:31:39.000Z","updated":"2018-03-16T01:14:18.000Z","comments":true,"path":"2017/09/01/docker-command/","link":"","permalink":"https://hodory.dev/2017/09/01/docker-command/","excerpt":"이미지 다운로드 1$ docker pull [다운로드 할 이미지명]: latest 이미지를 컨테이너로 만들때 1$ docker run -i -t --name [컨테이너명] -d [이미지명]","text":"이미지 다운로드 1$ docker pull [다운로드 할 이미지명]: latest 이미지를 컨테이너로 만들때 1$ docker run -i -t --name [컨테이너명] -d [이미지명] 컨테이너상태 확인 (&quot;a&quot;옵션은 정지된 컨테이너도 보여줌) 1$ docker ps [-a] 컨테이너를 실행 1$ docker start [컨테이너명] 컨테이너에 별칭을 주기 12$ docker run -it --name &lt;별칭&gt; &lt;이미지명&gt;ex) $ docker run -it --name nginx richarvey/nginx-php-fpm 컨테이너 특정 포트 연결12$ docker run -p &lt;로컬 포트 번호&gt;:&lt;컨테이너 포트 번호&gt; &lt;이미지명&gt;ex) $ docker run -p 8000:80 richarvey/nginx-php-fpm 컨테이너 정지 1$ docker stop [컨테이너명] bash shell로 명령실행가능하게함 1$ docker exec -it &lt;컨테이너 이름&gt; /bin/bash 컨테이너 삭제 1$ docker rm &lt;컨테이너이름&gt; 태그를 입력하지않으면 모든태그가 삭제됨 1$ docker rmi &lt;이미지 이름&gt;:&lt;태그&gt; 윈도우 드라이브 공유 12docker run -v &lt;윈도우 경로&gt;:&lt;컨테이너 경로&gt; -it &lt;컨테이너명&gt;ex) $ docker run -v /c/User/Administrator/PHP:/home/hodory -it nginx 아래와 같이 여러가지 조합도 가능하다12docker run -it --name &lt;별칭&gt; -d -p &lt;로컬포트&gt;:&lt;컨테이너포트&gt; -v &lt;로컬경로&gt;:&lt;컨테이너경로&gt; &lt;이미지명&gt;ex) $ docker run -it --name nginx -d -p 8000:80 -v /c/User/Administrator/PHP:/home/hodory richarvey/nginx-php-fpm","categories":[{"name":"ETC","slug":"ETC","permalink":"https://hodory.dev/categories/ETC/"},{"name":"Docker","slug":"ETC/Docker","permalink":"https://hodory.dev/categories/ETC/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://hodory.dev/tags/Docker/"},{"name":"도커","slug":"도커","permalink":"https://hodory.dev/tags/도커/"}]},{"title":"［PHP］삼항 연산자","slug":"conditional-ternary-operator","date":"2017-09-01T01:09:11.000Z","updated":"2019-05-12T07:11:32.050Z","comments":true,"path":"2017/09/01/conditional-ternary-operator/","link":"","permalink":"https://hodory.dev/2017/09/01/conditional-ternary-operator/","excerpt":"","text":"삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것) a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환 ex)12345&lt;?php$a = 'foo';$b = $a ?: 'bar';echo $b; // foo?&gt;","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"}]},{"title":"［Hexo］ 명령어 정리","slug":"how-to-use-hexo","date":"2017-08-31T13:57:17.000Z","updated":"2019-04-20T16:01:22.207Z","comments":true,"path":"2017/08/31/how-to-use-hexo/","link":"","permalink":"https://hodory.dev/2017/08/31/how-to-use-hexo/","excerpt":"Hexo 명령어 정리 # 초안 생성명령어1$ hexo new draft [파일명] 예제1$ hexo new draft hello-world","text":"Hexo 명령어 정리 # 초안 생성명령어1$ hexo new draft [파일명] 예제1$ hexo new draft hello-world # 초안을 포스트로 옮기기(Draft to Post)명령어1$ hexo publish [파일명] 예제1$ hexo publish hello-world # 포스트 생성명령어1$ hexo new [파일명] 예제1$ hexo new hello-world # 배포하기12$ hexo clean // clean을 하지 않으면 deploy를 해도 페이지가 업데이트 되지 않는 경우가 발생한다$ hexo deploy --generate # 기타사항 카테고리와 태그와 같은 설정은 어떻게 설정하나요 ? 포스트파일의 Front-matter에 아래와 같이 작성하시면 됩니다.123456789---title: PHP 0001과 같이 번호 지정 하기tags: - Hexo - HelloWorldcategories: - Hexodate: 2017-08-31 12:00:00--- 썸네일을 등록하고 싶어요 위의 포스트 Front-matter에 아래 사항을 추가하시면됩니다 아래에서 지정한 images 폴더의 위치는 source 폴더의 하위경로 입니다.1thumbnail: /images/logo.jpg","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hodory.dev/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hodory.dev/tags/Hexo/"}]},{"title":"［PHP］ 0001과 같이 번호 지정 하기","slug":"php-str-pad","date":"2017-08-31T12:51:38.000Z","updated":"2019-05-12T07:11:32.068Z","comments":true,"path":"2017/08/31/php-str-pad/","link":"","permalink":"https://hodory.dev/2017/08/31/php-str-pad/","excerpt":"","text":"PHP에서 0001과 같이 번호 지정하기1234&lt;?php$count = 1;$count = str_pad($count,4,'0',STR_PAD_LEFT); //0001?&gt; 01이나 001 같이 사용할 때는 두번째 파라미터 값에 2(01) 또는 3(001)을 사용하면 된다.","categories":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hodory.dev/tags/PHP/"},{"name":"str_pad","slug":"str-pad","permalink":"https://hodory.dev/tags/str-pad/"},{"name":"function","slug":"function","permalink":"https://hodory.dev/tags/function/"}]}]}